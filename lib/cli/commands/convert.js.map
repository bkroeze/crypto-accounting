{
  "version": 3,
  "sources": [
    "convert.js"
  ],
  "names": [
    "R",
    "require",
    "BigNumber",
    "path",
    "moment",
    "fs",
    "log",
    "get",
    "safeLoad",
    "safeDump",
    "Transaction",
    "stripFalsy",
    "parseWalletCSV",
    "rowToYaml",
    "mergeTransactionLists",
    "ledgerLoader",
    "flexibleLoadByExtSync",
    "ascendingDate",
    "ascend",
    "prop",
    "descendingDate",
    "descend",
    "randomSeed",
    "Math",
    "floor",
    "random",
    "readCSV",
    "raw",
    "currency",
    "debit",
    "credit",
    "readJSON",
    "base",
    "cb",
    "work",
    "JSON",
    "parse",
    "results",
    "map",
    "row",
    "date",
    "time",
    "address",
    "label",
    "amount",
    "reject",
    "wrapperIndex",
    "nextIndex",
    "LedgerWrapper",
    "constructor",
    "props",
    "id",
    "format",
    "utc",
    "toISOString",
    "toYaml",
    "replace",
    "ledgerWrapFactory",
    "readLedger",
    "loadObjectsFromString",
    "printResults",
    "descending",
    "byDay",
    "startDate",
    "searchDate",
    "console",
    "length",
    "filter",
    "x",
    "isSameOrBefore",
    "sorter",
    "sorted",
    "sort",
    "current",
    "forEach",
    "clone",
    "startOf",
    "isSame",
    "plus",
    "toFixed",
    "push",
    "handler",
    "args",
    "merge",
    "filename",
    "conversion",
    "existsSync",
    "process",
    "exit",
    "readFileSync",
    "conversions",
    "conversionMap",
    "patternSet",
    "from",
    "toreplace",
    "RegExp",
    "account",
    "processed",
    "endsWith",
    "orig",
    "start",
    "builder",
    "yargs",
    "option",
    "default",
    "type",
    "desc",
    "positional",
    "module",
    "exports",
    "command"
  ],
  "mappings": "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",
  "file": "convert.js",
  "sourceRoot": "../../../src/cli/commands",
  "sourcesContent": [
    "const R = require('ramda');\nconst BigNumber = require('bignumber.js');\nconst path = require('path');\nconst moment = require('moment');\nconst fs = require('graceful-fs');\nconst log = require('js-logger').get('cli.commands.convert');\nconst { safeLoad, safeDump } = require('js-yaml');\n\nconst Transaction = require('../../models/transaction');\nconst { stripFalsy } = require('../../utils/models');\nconst { parseWalletCSV, rowToYaml, mergeTransactionLists } = require('../../loaders/csv_converter');\nconst ledgerLoader = require('../../loaders/ledger_loader');\nconst { flexibleLoadByExtSync } = require('../../loaders/yaml_loader');\n\nconst ascendingDate = R.ascend(R.prop('utc'));\nconst descendingDate = R.descend(R.prop('utc'));\n\nconst randomSeed = Math.floor(Math.random() * 10000);\n\nfunction readCSV(raw, currency, debit, credit) {\n  return parseWalletCSV(\n    raw,\n    currency,\n    debit,\n    credit);\n}\n\nfunction readJSON(raw, base, cb) {\n  const work = JSON.parse(raw);\n  let results = work.map(row => {\n    return {\n      date: moment(row.time * 1000),\n      address: row.address,\n      label: base,\n      amount: row.amount,\n    };\n  });\n  return R.reject((row) => row.amount === 0, results);\n}\n\nlet wrapperIndex = 0;\nfunction nextIndex() {\n  wrapperIndex = wrapperIndex + 1;\n  return wrapperIndex;\n}\n\nclass LedgerWrapper {\n  constructor(props) {\n    this.props = {\n      id: `import-${moment().format('YYMMDD')}-${randomSeed}-${nextIndex()}`,\n      ...props,\n    };\n    this.utc = moment(props.utc);\n    this.props.utc = this.utc.toISOString();\n  }\n\n  toYaml() {\n    return safeDump([stripFalsy(this.props)]).replace(/'/g, '');\n  }\n}\n\nconst ledgerWrapFactory = (props) => new LedgerWrapper(props);\n\nfunction readLedger(raw) {\n  return ledgerLoader.loadObjectsFromString(raw)\n    .map(ledgerWrapFactory)\n}\n\n\nfunction printResults(results, base, credit, debit, descending, byDay, startDate) {\n  let work = results;\n  //console.log(work);\n  if (startDate) {\n    const searchDate = moment(startDate);\n    console.log('filtering for startDate', results.length)\n    work = results.filter(x => searchDate.isSameOrBefore(x.utc));\n    console.log('trimmed to', results.length);\n  }\n  const sorter = descending ? descendingDate : ascendingDate;\n  let sorted = R.sort(sorter, work);\n  if (byDay) {\n    const work = [];\n    let current;\n    sorted.forEach(row => {\n      if (!current) {\n        current = R.clone(row);\n        current.date = current.utc.startOf('day');\n        current.amount = BigNumber(current.amount);\n      } else if (current.utc.isSame(row.utc, 'day') && row.address === current.address) {\n        current.amount = current.amount.plus(BigNumber(row.amount));\n      } else {\n        current.amount = current.amount.toFixed(8);\n        work.push(current);\n        current = R.clone(row);\n        current.utc = current.utc.startOf('day');\n        current.amount = BigNumber(current.amount);\n      }\n    });\n    work.push(current);\n    sorted = work;\n  }\n  sorted.forEach(row => {\n    console.log(row.toYaml(byDay));\n  });\n  return true;\n}\n\nfunction handler(args) {\n  const {merge, filename, currency, credit, descending, conversion} = args;\n  if (!fs.existsSync(filename)) {\n    console.log(`File not found: ${filename}`);\n    process.exit(1);\n  }\n\n  if (merge && !fs.existsSync(merge)) {\n    console.log(`Merge file not found: ${merge}`);\n    process.exit(1);\n  }\n\n  if (conversion && !fs.existsSync(conversion)) {\n    console.log(`Conversion file not found: ${conversion}`);\n    process.exit(1);\n  }\n\n  let raw = fs.readFileSync(filename, 'utf-8');\n\n  if (conversion) {\n    const conversions = [];\n    const conversionMap = safeLoad(fs.readFileSync(conversion));\n    conversionMap.forEach(patternSet => {\n      patternSet.from.forEach(toreplace => {\n        conversions.push(x => x.replace(new RegExp(toreplace, 'g'), patternSet.account));\n      })\n    });\n\n    conversions.forEach(conversion => {\n      raw = conversion(raw);\n    });\n  }\n\n  const debit = args.debit.replace('{CURRENCY}', currency);\n\n  let processed;\n  if (R.endsWith('.csv', filename)) {\n    if (!currency) {\n      console.log('Please specify a --currency');\n      process.exit(1);\n    }\n    processed = readCSV(raw, currency, debit, credit);\n  } else if (R.endsWith('.json', filename)) {\n    if (!currency) {\n      console.log('Please specify a --currency');\n      process.exit(1);\n    }\n    processed = readJSON(raw, currency);\n  } else if (R.endsWith('.dat', filename)) {\n    processed = readLedger(raw);\n  }\n\n  let work;\n  if (!merge) {\n    work = processed;\n  } else {\n    const orig = readLedger(merge);\n    work = mergeTransactionLists(orig, processed);\n  }\n  printResults(work, currency, credit, debit, descending, args.byDay, args.start);\n}\n\nfunction builder(yargs) {\n  return yargs\n    .option('credit', {default: 'Income:Crypto:MN'})\n    .option('debit', {default: 'Assets:Crypto:Wallets:{CURRENCY}'})\n    .option('descending', {type: 'boolean', desc: 'Sort in descending date order', default: false})\n    .option('byDay', {type: 'boolean', desc: 'Bucket similar transactions by day', default: false})\n    .option('start', {type: 'string', desc: 'Starting date', default: false})\n    .option('currency', {type: 'string', desc: 'Which symbol for this conversion. EX: BTC'})\n    .option('merge', {type: 'string', desc: 'Merge with existing YAML file'})\n    .option('conversion', {type: 'string', desc: 'Yaml file for account conversions'})\n    .positional('filename', {type: 'string', desc: 'CSV file to read'});\n}\n\nmodule.exports = {\n  command: {\n    command: 'convert <filename>',\n    desc: 'Convert CSV, Ledger or JSON to Yaml-Transaction format',\n    builder,\n    handler,\n  }\n};\n"
  ]
}
