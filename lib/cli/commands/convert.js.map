{
  "version": 3,
  "sources": [
    "convert.js"
  ],
  "names": [
    "R",
    "require",
    "BigNumber",
    "moment",
    "fs",
    "log",
    "get",
    "Transaction",
    "parseWalletCSV",
    "rowToYaml",
    "ledgerLoader",
    "ascendingDate",
    "ascend",
    "prop",
    "descendingDate",
    "descend",
    "readCSV",
    "filename",
    "currency",
    "debit",
    "credit",
    "readFileSync",
    "toString",
    "readJSON",
    "base",
    "cb",
    "raw",
    "work",
    "JSON",
    "parse",
    "results",
    "map",
    "row",
    "date",
    "time",
    "address",
    "label",
    "amount",
    "reject",
    "readLedger",
    "loadTransactionsFromFilenameSync",
    "printResults",
    "descending",
    "byDay",
    "startDate",
    "searchDate",
    "console",
    "length",
    "filter",
    "x",
    "isSameOrBefore",
    "utc",
    "sorter",
    "sorted",
    "sort",
    "current",
    "forEach",
    "clone",
    "startOf",
    "isSame",
    "plus",
    "toFixed",
    "push",
    "is",
    "toYaml",
    "handler",
    "args",
    "existsSync",
    "process",
    "exit",
    "replace",
    "showResults",
    "start",
    "endsWith",
    "builder",
    "yargs",
    "option",
    "default",
    "type",
    "desc",
    "positional",
    "module",
    "exports",
    "command"
  ],
  "mappings": "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",
  "file": "convert.js",
  "sourceRoot": "../../../src/cli/commands",
  "sourcesContent": [
    "const R = require('ramda');\nconst BigNumber = require('bignumber.js');\nconst moment = require('moment');\nconst fs = require('graceful-fs');\nconst log = require('js-logger').get('cli.commands.convert');\n\nconst Transaction = require('../../models/transaction');\nconst { parseWalletCSV, rowToYaml } = require('../../loaders/csv_converter');\nconst ledgerLoader = require('../../loaders/ledger_loader');\n\nconst ascendingDate = R.ascend(R.prop('utc'));\nconst descendingDate = R.descend(R.prop('utc'));\n\nfunction readCSV(filename, currency, debit, credit) {\n  return parseWalletCSV(\n    fs.readFileSync(filename).toString(),\n    currency,\n    debit,\n    credit);\n}\n\nfunction readJSON(filename, base, cb) {\n  let raw = fs.readFileSync(filename).toString();\n  //const re = /\\\"amount\\\" : (.*),/g\n  // quote the amount, so that we don't lose precision\n  //raw = raw.replace(re, '\"Amount\" : \"$1\"');\n  const work = JSON.parse(raw);\n  let results = work.map(row => {\n    return {\n      date: moment(row.time * 1000),\n      address: row.address,\n      label: base,\n      amount: row.amount,\n    };\n  });\n  return R.reject((row) => row.amount === 0, results);\n}\n\nfunction readLedger(filename) {\n  return ledgerLoader.loadTransactionsFromFilenameSync(filename);\n}\n\nfunction printResults(results, base, credit, debit, descending, byDay, startDate) {\n  let work = results;\n  //console.log(work);\n  if (startDate) {\n    const searchDate = moment(startDate);\n    console.log('filtering for startDate', results.length)\n    work = results.filter(x => searchDate.isSameOrBefore(x.utc));\n    console.log('trimmed to', results.length);\n  }\n  const sorter = descending ? descendingDate : ascendingDate;\n  let sorted = R.sort(sorter, work);\n  if (byDay) {\n    const work = [];\n    let current;\n    sorted.forEach(row => {\n      if (!current) {\n        current = R.clone(row);\n        current.date = current.date.startOf('day');\n        current.amount = BigNumber(current.amount);\n      } else if (current.date.isSame(row.date, 'day') && row.address === current.address) {\n        current.amount = current.amount.plus(BigNumber(row.amount));\n      } else {\n        current.amount = current.amount.toFixed(8);\n        work.push(current);\n        current = R.clone(row);\n        current.date = current.date.startOf('day');\n        current.amount = BigNumber(current.amount);\n      }\n    });\n    work.push(current);\n    sorted = work;\n  }\n  sorted.forEach(row => {\n    console.log(R.is(Transaction, row) ? row.toYaml(byDay) : rowToYaml(row, byDay));\n  });\n  return true;\n}\n\nfunction handler(args) {\n  const {filename, currency, credit, descending} = args;\n  if (!fs.existsSync(filename)) {\n    console.log(`File not found: ${filename}`);\n    process.exit(1);\n  }\n\n  const debit = args.debit.replace('{CURRENCY}', currency);\n\n  const showResults = (results) => {\n    printResults(results, currency, credit, debit, descending, args.byDay, args.start);\n  };\n\n  if (R.endsWith('.csv', filename)) {\n    if (!currency) {\n      console.log('Please specify a --currency');\n      process.exit(1);\n    }\n    showResults(readCSV(filename, currency, debit, credit));\n  } else if (R.endsWith('.json', filename)) {\n    if (!currency) {\n      console.log('Please specify a --currency');\n      process.exit(1);\n    }\n    showResults(readJSON(filename, currency));\n  } else if (R.endsWith('.dat', filename)) {\n    showResults(readLedger(filename));\n  }\n}\n\nfunction builder(yargs) {\n  return yargs\n    .option('credit', {default: 'Income:Crypto:MN'})\n    .option('debit', {default: 'Assets:Crypto:Wallets:{CURRENCY}'})\n    .option('descending', {type: 'boolean', desc: 'Sort in descending date order', default: false})\n    .option('byDay', {type: 'boolean', desc: 'Bucket similar transactions by day', default: false})\n    .option('start', {type: 'string', desc: 'Starting date', default: false})\n    .option('currency', {type: 'string', desc: 'Which symbol for this conversion. EX: BTC'})\n    .positional('filename', {type: 'string', desc: 'CSV file to read'});\n}\n\nmodule.exports = {\n  command: {\n    command: 'convert <filename>',\n    desc: 'Convert CSV, Ledger or JSON to Yaml-Transaction format',\n    builder,\n    handler,\n  }\n};\n"
  ]
}
