{
  "version": 3,
  "sources": [
    "currency.js"
  ],
  "names": [
    "R",
    "require",
    "RA",
    "utils",
    "ERRORS",
    "makeError",
    "DEFAULT_PROPS",
    "id",
    "name",
    "note",
    "translation",
    "fiatDefault",
    "tags",
    "KEYS",
    "keysIn",
    "getProps",
    "pick",
    "Currency",
    "constructor",
    "props",
    "merged",
    "merge",
    "forEach",
    "key",
    "console",
    "error",
    "JSON",
    "stringify",
    "TypeError",
    "INVALID_TERM",
    "makeCurrencies",
    "raw",
    "currencies",
    "hasTag",
    "tag",
    "contained",
    "isFiat",
    "toObject",
    "stripFalsyExcept",
    "toString",
    "module",
    "exports"
  ],
  "mappings": "AAAA;AACA,MAAMA,IAAIC,QAAQ,OAAR,CAAV;AACA,MAAMC,KAAKD,QAAQ,eAAR,CAAX;AACA,MAAME,QAAQF,QAAQ,iBAAR,CAAd;;AAEA,MAAM,EAAEG,MAAF,KAAaH,QAAQ,aAAR,CAAnB;AACA,MAAM,EAAEI,SAAF,KAAgBJ,QAAQ,iBAAR,CAAtB;;AAEA,MAAMK,gBAAgB;AACpBC,MAAI,EADgB;AAEpBC,QAAM,EAFc;AAGpBC,QAAM,EAHc;AAIpBC,eAAa,EAJO;AAKpBC,eAAa,KALO;AAMpBC,QAAM;AANc,CAAtB;;AASA,MAAMC,OAAOb,EAAEc,MAAF,CAASR,aAAT,CAAb;;AAEA,MAAMS,WAAWf,EAAEgB,IAAF,CAAOH,IAAP,CAAjB;;AAEA;;;AAGA,MAAMI,QAAN,CAAe;AACb;;;;;AAKAC,cAAYC,QAAQ,EAApB,EAAwB;AACtB,UAAMC,SAASpB,EAAEqB,KAAF,CAAQf,aAAR,EAAuBS,SAASI,KAAT,CAAvB,CAAf;;AAEAN,SAAKS,OAAL,CAAcC,GAAD,IAAS;AACpB,WAAKA,GAAL,IAAYH,OAAOG,GAAP,CAAZ;AACD,KAFD;;AAIA,QAAI,CAAC,KAAKhB,EAAV,EAAc;AACZiB,cAAQC,KAAR,CAAe,2CAA0CC,KAAKC,SAAL,CAAeR,KAAf,CAAsB,EAA/E;AACA,YAAMd,UACJuB,SADI,EAEJxB,OAAOyB,YAFH,EAGJ,mCAHI,CAAN;AAKD;AACD,QAAI,CAAC,KAAKrB,IAAV,EAAgB;AACd,WAAKA,IAAL,GAAY,KAAKD,EAAjB;AACD;AACF;;AAED;;;;;AAKA,SAAOuB,cAAP,CAAsBC,GAAtB,EAA2B;AACzB,UAAMC,aAAa,EAAnB;AACAhC,MAAEc,MAAF,CAASiB,GAAT,EAAcT,OAAd,CAAuBf,EAAD,IAAQ;AAC5ByB,iBAAWzB,EAAX,IAAiB,IAAIU,QAAJ,CAAajB,EAAEqB,KAAF,CAAQU,IAAIxB,EAAJ,CAAR,EAAiB,EAAEA,EAAF,EAAjB,CAAb,CAAjB;AACD,KAFD;AAGA,WAAOyB,UAAP;AACD;;AAED;;;;;AAKAC,SAAOC,GAAP,EAAY;AACV,WAAOhC,GAAGiC,SAAH,CAAa,KAAKvB,IAAlB,EAAwBsB,GAAxB,CAAP;AACD;;AAED;;;;AAIAE,WAAS;AACP,WAAO,KAAKzB,WAAL,IAAoB,KAAKsB,MAAL,CAAY,MAAZ,CAA3B;AACD;;AAED;;;;AAIAI,aAAW;AACT,WAAOlC,MAAMmC,gBAAN,CAAuB;AAC5B/B,UAAI,KAAKA,EADmB;AAE5BC,YAAM,KAAKA,IAFiB;AAG5BC,YAAM,KAAKA,IAHiB;AAI5BC,mBAAa,KAAKA,WAJU;AAK5BC,mBAAa,KAAKA,WALU;AAM5BC,YAAM,KAAKA;AANiB,KAAvB,CAAP;AAQD;;AAED2B,aAAW;AACT,WAAQ,aAAY,KAAKhC,EAAG,EAA5B;AACD;AAzEY;;AA4EfiC,OAAOC,OAAP,GAAiBxB,QAAjB",
  "file": "currency.js",
  "sourceRoot": "../../src/models",
  "sourcesContent": [
    "/* eslint no-console: [\"error\", { allow: [\"error\"] }] */\nconst R = require('ramda');\nconst RA = require('ramda-adjunct');\nconst utils = require('../utils/models');\n\nconst { ERRORS } = require('./constants');\nconst { makeError } = require('../utils/errors');\n\nconst DEFAULT_PROPS = {\n  id: '',\n  name: '',\n  note: '',\n  translation: '',\n  fiatDefault: false,\n  tags: [],\n};\n\nconst KEYS = R.keysIn(DEFAULT_PROPS);\n\nconst getProps = R.pick(KEYS);\n\n/**\n * Represents any currency or non-stock tradeable commodity.\n */\nclass Currency {\n  /**\n   * Construct using a `props` object that must include \"id\", and may also\n   * include \"name\" and \"note\"\n   * @param {object} props\n   */\n  constructor(props = {}) {\n    const merged = R.merge(DEFAULT_PROPS, getProps(props));\n\n    KEYS.forEach((key) => {\n      this[key] = merged[key];\n    });\n\n    if (!this.id) {\n      console.error(`Invalid Currency, must have an id, got: ${JSON.stringify(props)}`);\n      throw makeError(\n        TypeError,\n        ERRORS.INVALID_TERM,\n        'Invalid Currency, must have an id'\n      );\n    }\n    if (!this.name) {\n      this.name = this.id;\n    }\n  }\n\n  /**\n   * Make a currencies object from a yaml description\n   * @param {Object<String, Object} raw object representation, typically from YAML load\n   * @return {Object<String, Currency} currencies keyed by id\n   */\n  static makeCurrencies(raw) {\n    const currencies = {};\n    R.keysIn(raw).forEach((id) => {\n      currencies[id] = new Currency(R.merge(raw[id], { id }));\n    });\n    return currencies;\n  }\n\n  /**\n   * Test whether this currency has a specific flag.\n   * @param {String} tag to search for\n   * @return {Boolean} true if found\n   */\n  hasTag(tag) {\n    return RA.contained(this.tags, tag);\n  }\n\n  /**\n   * Check to see if this currency is to be treated as a fiat currency.\n   * @return {Boolean} true if fiat\n   */\n  isFiat() {\n    return this.fiatDefault || this.hasTag('fiat');\n  }\n\n  /**\n   * Get a representation of this object useful for logging or converting to yaml\n   * @return {Object<String, *>}\n   */\n  toObject() {\n    return utils.stripFalsyExcept({\n      id: this.id,\n      name: this.name,\n      note: this.note,\n      translation: this.translation,\n      fiatDefault: this.fiatDefault,\n      tags: this.tags,\n    });\n  }\n\n  toString() {\n    return `Currency: ${this.id}`;\n  }\n}\n\nmodule.exports = Currency;\n"
  ]
}
