{
  "version": 3,
  "sources": [
    "constants.js"
  ],
  "names": [
    "union",
    "derivations",
    "require",
    "constants",
    "CREDIT",
    "DEBIT",
    "INHERIT",
    "CLEARED",
    "ERRORS",
    "LEDGER_LINE_COMMENT",
    "LEDGER_COMMENTS",
    "SYMBOL_MAP",
    "Map",
    "forEach",
    "k",
    "InvalidShortcut",
    "message",
    "InvalidTrade",
    "ParseErrors",
    "derive",
    "equality",
    "debugRepresentation",
    "module",
    "exports"
  ],
  "mappings": "AAAA,MAAM,EAAEA,KAAF,EAASC,WAAT,KAAyBC,QAAQ,oBAAR,CAA/B;;AAEA,MAAMC,YAAY;AAChBC,UAAQ,QADQ;AAEhBC,SAAO,OAFS;AAGhBC,WAAS,WAHO;AAIhBC,WAAS,SAJO;AAKhBC,UAAQ,EALQ;AAMhBC,uBAAqB,GANL;AAOhBC,mBAAiB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAPD;AAQhBC,cAAY,IAAIC,GAAJ,CAAQ,CAAC,CAAC,GAAD,EAAM,KAAN,CAAD,EAAe,CAAC,GAAD,EAAM,KAAN,CAAf,EAA6B,CAAC,GAAD,EAAM,KAAN,CAA7B,CAAR;AARI,CAAlB;;AAWA,CACE,OADF,EAEE,WAFF,EAGE,iBAHF,EAIE,kBAJF,EAKE,cALF,EAME,iBANF,EAOE,mBAPF,EAQE,WARF,EASE,cATF,EAUEC,OAVF,CAUWC,CAAD,IAAO;AACfX,YAAUK,MAAV,CAAiBM,CAAjB,IAAuB,OAAMA,CAAE,EAA/B;AACD,CAZD;;AAcA,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AAChC,SAAO,EAAEA,OAAF,EAAP;AACD;;AAED,SAASC,YAAT,CAAsBD,OAAtB,EAA+B;AAC7B,SAAO,EAAEA,OAAF,EAAP;AACD;;AAEDb,UAAUK,MAAV,CAAiBU,WAAjB,GAA+BlB,MAAM,cAAN,EAAsB;AACnDe,iBADmD;AAEnDE;AAFmD,CAAtB,EAG5BE,MAH4B,CAI7BlB,YAAYmB,QAJiB,EAK7BnB,YAAYoB,mBALiB,CAA/B;;AASAC,OAAOC,OAAP,GAAiBpB,SAAjB",
  "file": "constants.js",
  "sourceRoot": "../../src/models",
  "sourcesContent": [
    "const { union, derivations } = require('folktale/adt/union');\n\nconst constants = {\n  CREDIT: 'credit',\n  DEBIT: 'debit',\n  INHERIT: '%INHERIT%',\n  CLEARED: 'cleared',\n  ERRORS: {},\n  LEDGER_LINE_COMMENT: ';',\n  LEDGER_COMMENTS: [';', '#', '|', '*'],\n  SYMBOL_MAP: new Map([['$', 'USD'], ['£', 'GBP'], ['€', 'EUR']]),\n};\n\n[\n  'EMPTY',\n  'EXHAUSTED',\n  'INVALID_ACCOUNT',\n  'INVALID_SHORTCUT',\n  'INVALID_TERM',\n  'MISSING_ACCOUNT',\n  'MISSING_PARAMETER',\n  'NOT_FOUND',\n  'OUT_OF_RANGE',\n].forEach((k) => {\n  constants.ERRORS[k] = `ERR_${k}`;\n});\n\nfunction InvalidShortcut(message) {\n  return { message };\n}\n\nfunction InvalidTrade(message) {\n  return { message };\n}\n\nconstants.ERRORS.ParseErrors = union('parse-errors', {\n  InvalidShortcut,\n  InvalidTrade,\n}).derive(\n  derivations.equality,\n  derivations.debugRepresentation\n);\n\n\nmodule.exports = constants;\n"
  ]
}
