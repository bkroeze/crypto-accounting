{
  "version": 3,
  "sources": [
    "journal.js"
  ],
  "names": [
    "R",
    "require",
    "Accounts",
    "PriceHistory",
    "Transaction",
    "makeCurrencies",
    "utils",
    "BIG_0",
    "sets",
    "DEFAULT_PROPS",
    "id",
    "name",
    "accounts",
    "currencies",
    "transactions",
    "pricehistory",
    "KEYS",
    "keysIn",
    "getProps",
    "pick",
    "Journal",
    "constructor",
    "props",
    "merged",
    "merge",
    "propOr",
    "makeTransactions",
    "checkAndApply",
    "isEmpty",
    "length",
    "forEach",
    "tx",
    "applyToAccounts",
    "createBalancingEntries",
    "getCleanliness",
    "stripFalsy",
    "getCleanlinessOfAccounts",
    "getCleanlinessOfCurrencies",
    "getCleanlinessOfTransactions",
    "problems",
    "accountsUsed",
    "mergeSets",
    "map",
    "getAccounts",
    "account",
    "has",
    "push",
    "currenciesUsed",
    "getCurrencies",
    "currenciesAvailable",
    "Set",
    "Object",
    "keys",
    "currenciesMissing",
    "setDifference",
    "missing",
    "isBalanced",
    "utc",
    "toISODate",
    "findPrice",
    "base",
    "quote",
    "transCurrencies",
    "within",
    "translations",
    "getTranslationCurrencies",
    "prop",
    "getAccount",
    "key",
    "get",
    "getBalancesByAccount",
    "entryFilter",
    "balances",
    "getBalancesByCurrency",
    "includeVirtual",
    "byAccount",
    "accountPath",
    "acct",
    "isVirtual",
    "acctBal",
    "curr",
    "quantity",
    "eq",
    "plus",
    "getLots",
    "force",
    "lifo",
    "getLotsByCurrency",
    "lots",
    "l",
    "currency",
    "valuesIn",
    "filter",
    "c",
    "translation",
    "toObject",
    "options",
    "stripFalsyExcept",
    "objectValsToObject",
    "arrayToObjects",
    "module",
    "exports"
  ],
  "mappings": "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",
  "file": "journal.js",
  "sourceRoot": "../../src/models",
  "sourcesContent": [
    "const R = require('ramda');\n\nconst Accounts = require('./accounts');\nconst PriceHistory = require('./pricehistory');\nconst Transaction = require('./transaction');\nconst { makeCurrencies } = require('./currency');\nconst utils = require('../utils/models');\nconst { BIG_0 } = require('../utils/numbers');\nconst sets = require('../utils/sets');\n\n/**\n * Default properties for new Journal instances\n */\nconst DEFAULT_PROPS = {\n  id: null,\n  name: null,\n  accounts: {},\n  currencies: {},\n  transactions: [],\n  pricehistory: null,\n};\n\nconst KEYS = R.keysIn(DEFAULT_PROPS);\nconst getProps = R.pick(KEYS);\n\nclass Journal {\n  /**\n   * Construct using a `props` object.\n   * @param {object} props\n   */\n  constructor(props) {\n    const merged = R.merge(DEFAULT_PROPS, getProps(props));\n    this.id = R.propOr(merged.name, 'id', merged);\n    this.name = merged.name;\n    this.accounts = new Accounts(merged.accounts);\n    this.currencies = makeCurrencies(merged.currencies);\n    this.transactions = Transaction.makeTransactions(merged.transactions);\n    this.pricehistory = new PriceHistory(merged.pricehistory);\n    this.checkAndApply();\n  }\n\n  /**\n   * Test to see if sufficient information exists to fill in transaction\n   * information, and do so if conditions are met.\n   */\n  checkAndApply() {\n    const { accounts, transactions } = this;\n    if (accounts && !accounts.isEmpty() && transactions && transactions.length > 0) {\n      transactions.forEach((tx) => {\n        tx.applyToAccounts(accounts);\n      });\n      accounts.createBalancingEntries();\n    }\n  }\n\n  /**\n   * Generate a report showing helpful messages about aspects of the journal that may need fixing\n   * for integrity and accuracy.\n   * @return {Object<String, Array>} A report keyed by area.\n   */\n  getCleanliness() {\n    return utils.stripFalsy({\n      accounts: this.getCleanlinessOfAccounts(),\n      currencies: this.getCleanlinessOfCurrencies(),\n      transactions: this.getCleanlinessOfTransactions(),\n    });\n  }\n\n  getCleanlinessOfAccounts() {\n    const problems = [];\n    const accountsUsed = sets.mergeSets(this.transactions.map(tx => tx.getAccounts()));\n    accountsUsed.forEach(account => {\n      if (!this.accounts.has(account)) {\n        problems.push(`${account} not defined in accounts list`);\n      }\n    });\n    return problems;\n  }\n\n\n  getCleanlinessOfCurrencies() {\n    const problems = [];\n    const currenciesUsed = sets.mergeSets(this.transactions.map(tx => tx.getCurrencies()));\n    const currenciesAvailable = new Set(Object.keys(this.currencies));\n    const currenciesMissing = sets.setDifference(currenciesUsed, currenciesAvailable);\n    currenciesMissing.forEach(missing => {\n      problems.push(`${missing} currency not defined in currencies list`);\n    });\n    return problems;\n  }\n\n  getCleanlinessOfTransactions() {\n    const problems = [];\n    this.transactions.forEach(tx => {\n      if (!tx.isBalanced()) {\n        problems.push(`Transaction ${tx.id} on ${tx.utc.toISODate()} is not balanced.`);\n      }\n    });\n    return problems;\n  }\n\n  /**\n   * Find the nearest price for the given currency pair\n   * @param {String|Moment|Object} utc\n   * @param {String} base currency\n   * @param {String} quote currency - the rate refers to this many of this currency for 1 base\n   * @param {Array} currencies to use as bases for derivation\n   * @param {Integer} within seconds (no limit if not given or null)\n   * @return {PairPrice}\n   * @throws {RangeError} with code \"ERR_DISTANCE\" if nearest is out of range\n   * @throws {RangeError} with code \"ERR_NOT_FOUND\" if pair is not present and cannot be derived\n   */\n  findPrice(utc, base, quote, transCurrencies = null, within = null) {\n    const translations = transCurrencies || this.getTranslationCurrencies().map(R.prop('id'));\n    return this.pricehistory.findPrice(utc, base, quote, translations, within);\n  }\n\n  /**\n   * Get an account from this Journal by following the key path, splitting on\n   * colons.\n   * @param {String} key such as \"assets:banks\"\n   * @return {Account} account\n   * @throws {ReferenceError} if account not found\n   */\n  getAccount(key) {\n    return this.accounts.get(key);\n  }\n\n  /**\n   * Get balances for all accounts\n   * @param {Function} filter to apply to entries\n   * @return {object} balances keyed by account path\n   */\n  getBalancesByAccount(entryFilter) {\n    let balances = {};\n    this.accounts.forEach((account) => {\n      balances = R.merge(balances, account.getBalancesByAccount(entryFilter));\n    });\n    return balances;\n  }\n\n  /**\n   * Get balances of currencies, with account subtotals\n   * @param {Function} filter to apply to entries\n   * @param {Boolean} includeVirtual [default false]\n   * @return {Object} balances keyed by currency\n   */\n  getBalancesByCurrency(entryFilter, includeVirtual = false) {\n    const { accounts } = this;\n    const balances = {};\n    const byAccount = this.getBalancesByAccount(entryFilter);\n\n    Object.keys(byAccount).forEach((accountPath) => {\n      const acct = accounts.get(accountPath);\n      if (includeVirtual || !acct.isVirtual()) {\n        const acctBal = byAccount[accountPath];\n        Object.keys(acctBal).forEach((curr) => {\n          const quantity = acctBal[curr];\n          if (!quantity.eq(BIG_0)) {\n            if (!R.has(curr, balances)) {\n              balances[curr] = { quantity, accounts: { [accountPath]: quantity } };\n            } else {\n              balances[curr].quantity = balances[curr].quantity.plus(quantity);\n              balances[curr].accounts[accountPath] = quantity;\n            }\n          }\n        });\n      }\n    });\n\n    return balances;\n  }\n\n  /**\n   * Get the lots for this journal.\n   * @param {boolean} force - always recalculate if true\n   * @param {boolean} lifo - override default fifo ordering if true\n   * @return {Array<Lot>} lots\n   */\n  getLots(force, lifo) {\n    return this.accounts.getLots(this.currencies, force, lifo);\n  }\n\n  /**\n   * Get lots for this journal as an object keyed by currency.\n   * @param {boolean} force - always recalculate if true\n   * @param {boolean} lifo - override default fifo ordering if true\n   * @param {Object<String, Lot>} lots\n   */\n  getLotsByCurrency(force, lifo) {\n    const lots = {};\n    this.getLots(force, lifo).forEach((l) => {\n      if (!R.has(l.currency, lots)) {\n        lots[l.currency] = [l];\n      } else {\n        lots[l.currency].push(l);\n      }\n    });\n    return lots;\n  }\n\n  /**\n   * Get currencies noted as translation currencies in the Journal.\n   * @return {Array<Currency>} translation currencies\n   */\n  getTranslationCurrencies() {\n    return R.valuesIn(this.currencies).filter(c => c.translation);\n  }\n\n  /**\n   * Get a representation of this object useful for logging or converting to yaml\n   * @return {Object<String, *>}\n   */\n  toObject(options = {}) {\n    return utils.stripFalsyExcept({\n      id: this.id,\n      name: this.name,\n      accounts: this.accounts.toObject(options),\n      currencies: utils.objectValsToObject(this.currencies, options),\n      transactions: utils.arrayToObjects(this.transactions, options),\n      pricehistory: this.pricehistory.toObject(options),\n    });\n  }\n}\n\nmodule.exports = Journal;\n"
  ]
}
