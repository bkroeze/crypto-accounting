{
  "version": 3,
  "sources": [
    "transaction.js"
  ],
  "names": [
    "R",
    "require",
    "RA",
    "Moment",
    "log",
    "get",
    "Entry",
    "Credit",
    "Debit",
    "utils",
    "Parser",
    "makeError",
    "calcHashId",
    "CREDIT",
    "DEBIT",
    "ERRORS",
    "SYMBOL_MAP",
    "makeFees",
    "fees",
    "DEFAULT_PROPS",
    "id",
    "account",
    "credit",
    "debit",
    "status",
    "party",
    "address",
    "utc",
    "note",
    "tags",
    "entries",
    "debits",
    "credits",
    "trades",
    "details",
    "KEYS",
    "keysIn",
    "getProps",
    "pick",
    "allBalanced",
    "all",
    "e",
    "isBalanced",
    "getDebits",
    "filter",
    "propEq",
    "getCredits",
    "Transaction",
    "constructor",
    "props",
    "merged",
    "merge",
    "has",
    "isString",
    "forEach",
    "key",
    "console",
    "error",
    "JSON",
    "stringify",
    "TypeError",
    "INVALID_TERM",
    "makeEntries",
    "addEntryPair",
    "pair",
    "push",
    "makeBalancedPairs",
    "makeTrades",
    "toObject",
    "makeTransactions",
    "raw",
    "map",
    "tx",
    "applyToAccounts",
    "accounts",
    "applyToAccount",
    "fn",
    "getAccounts",
    "Set",
    "getAccountPath",
    "getCurrencies",
    "prop",
    "getTradePairs",
    "entry",
    "isTrade",
    "makeBalancedPair",
    "shortcut",
    "isCredit",
    "leadingSymbolMap",
    "tokens",
    "tokenizeShortcut",
    "accountShortcut",
    "join",
    "noAccountShortcut",
    "slice",
    "transaction",
    "setPair",
    "rawArray",
    "parser",
    "errors",
    "makeCredit",
    "value",
    "quantity",
    "currency",
    "makeDebit",
    "comment",
    "parseTrade",
    "matchWith",
    "Ok",
    "Error",
    "size",
    "length",
    "options",
    "stripFalsy",
    "byDay",
    "format",
    "toISOString",
    "t",
    "toString",
    "toYaml",
    "data",
    "work",
    "prefix",
    "val",
    "getFullShortcut",
    "tag",
    "module",
    "exports"
  ],
  "mappings": "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",
  "file": "transaction.js",
  "sourceRoot": "../../src/models",
  "sourcesContent": [
    "/* eslint no-console: [\"error\", { allow: [\"error\"] }] */\nconst R = require('ramda');\nconst RA = require('ramda-adjunct');\nconst Moment = require('moment');\nconst log = require('js-logger').get('models.transaction');\nconst Entry = require('./entry');\nconst Credit = require('./credit');\nconst Debit = require('./debit');\nconst utils = require('../utils/models');\nconst Parser = require('../utils/parser');\nconst { makeError } = require('../utils/errors');\nconst { calcHashId } = require('../utils/numbers');\nconst { CREDIT, DEBIT, ERRORS, SYMBOL_MAP } = require('./constants');\n\n// stub out fee descriptors\nconst makeFees = fees => fees;\n\nconst DEFAULT_PROPS = {\n  id: '',\n  account: { credit: '', debit: '' },\n  status: '',\n  party: '',\n  address: '',\n  utc: '',\n  note: '',\n  fees: [],\n  tags: [],\n  entries: [],\n  debits: [],\n  credits: [],\n  trades: [],\n  details: {},\n};\n\nconst KEYS = R.keysIn(DEFAULT_PROPS);\n\nconst getProps = R.pick(KEYS);\nconst allBalanced = R.all(e => e.isBalanced());\nconst getDebits = R.filter(R.propEq('type', DEBIT));\nconst getCredits = R.filter(R.propEq('type', CREDIT));\n\nclass Transaction {\n  /**\n   * Construct using a `props` object that must include \"utc\", and may also\n   * include \"notes\", \"tags\", and a list of transactions\n   * @param {object} props\n   */\n  constructor(props = {}) {\n    const merged = R.merge(DEFAULT_PROPS, getProps(props));\n    const { trades, debits, credits, entries, fees } = merged;\n\n    if (R.has('account', merged) && RA.isString(merged.account)) {\n      merged.account = { credit: merged.account, debit: merged.account };\n    }\n\n    KEYS.forEach((key) => {\n      if (key !== 'debits' && key !== 'credits' && key !== 'entries') {\n        this[key] = merged[key];\n      }\n    });\n\n    if (!this.utc) {\n      console.error(`Invalid Transaction, must have a 'utc', got: ${JSON.stringify(props)}`);\n      throw makeError(\n        TypeError,\n        ERRORS.INVALID_TERM,\n        'Invalid Transaction, must have a utc'\n      );\n    }\n    this.utc = Moment(this.utc);\n\n    // TODO: remove\n    this.entries = Entry.makeEntries(entries, this);\n\n    const addEntryPair = (pair) => {\n      this.entries.push(pair.credit);\n      this.entries.push(pair.debit);\n    };\n\n    if (credits) {\n      this.makeBalancedPairs(credits, true).forEach(addEntryPair);\n    }\n    if (debits) {\n      this.makeBalancedPairs(debits, false).forEach(addEntryPair);\n    }\n    if (trades) {\n      this.makeTrades(trades)[0].forEach(addEntryPair);\n    }\n    this.fees = makeFees(fees);\n    if (!this.id) {\n      this.id = calcHashId(this.toObject());\n    }\n  }\n\n  /**\n   * Create transactions from a raw list\n   * @param {Array<Object>} raw transaction objections\n   * @return {Array<Transaction>} transactions\n   */\n  static makeTransactions(raw) {\n    return raw.map(tx => new Transaction(tx));\n  }\n\n  /**\n   * Applies all entries to their correct accounts.\n   * @param {Accounts} accounts\n   * @return {Transaction} this transaction\n   */\n  applyToAccounts(accounts) {\n    this.entries.forEach(e => e.applyToAccount(accounts));\n    return this;\n  }\n\n  /**\n   * Apply a function to all entries.\n   * @param {Function} function to apply\n   */\n  forEach(fn) {\n    if (fn) {\n      this.entries.forEach(fn);\n    }\n  }\n\n  getAccounts() {\n    return new Set(this.map(e => e.getAccountPath()));\n  }\n\n  /**\n   * Get all credits from this transaction entries\n   * @return {Array<Entry} Credits\n   */\n  getCredits() {\n    return getCredits(this.entries);\n  }\n\n  /**\n   * Get the set of all currencies used in this transaction\n   */\n  getCurrencies() {\n    return new Set(this.map(R.prop('currency')));\n  }\n\n  /**\n   * Get all debits from this transaction entries\n   * @return {Array<Entry} Debits\n   */\n  getDebits() {\n    return getDebits(this.entries);\n  }\n\n  /**\n   * Get all trade pairs from entries.\n   */\n  getTradePairs() {\n    return this.getDebits().filter(entry => entry.isTrade()).map(entry => ({\n      credit: entry.pair,\n      debit: entry,\n    }));\n  }\n\n  /**\n   * Test whether all debits in this transaction are balanced.\n   */\n  isBalanced() {\n    return allBalanced(this.getDebits());\n  }\n\n  makeBalancedPair(shortcut, isCredit, leadingSymbolMap) {\n    const tokens = Entry.tokenizeShortcut(shortcut, leadingSymbolMap);\n    const accountShortcut = tokens.join(' ');\n    const noAccountShortcut = tokens.slice(0, 2).join(' '); // strip the account and comment, if any\n\n    let credit;\n    let debit;\n    if (isCredit) {\n      credit = new Credit({ shortcut: noAccountShortcut, transaction: this });\n      debit = new Debit({ shortcut: accountShortcut, transaction: this });\n      credit.setPair(debit, false);\n    } else {\n      credit = new Credit({ shortcut: accountShortcut, transaction: this });\n      debit = new Debit({ shortcut: noAccountShortcut, transaction: this });\n      debit.setPair(credit, false);\n    }\n    return { credit, debit };\n  }\n\n  makeBalancedPairs(rawArray, isCredit, leadingSymbolMap = SYMBOL_MAP) {\n    return rawArray.map(shortcut => this.makeBalancedPair(shortcut, isCredit, leadingSymbolMap));\n  }\n\n  makeTrades(rawArray, leadingSymbolMap = SYMBOL_MAP) {\n    const parser = new Parser(leadingSymbolMap);\n    const trades = [];\n    const errors = [];\n    const transaction = this;\n\n    const makeCredit = (value) => {\n      const [quantity, currency] = value;\n      return new Credit({ quantity, currency, transaction });\n    };\n\n    const makeDebit = (value) => {\n      const [quantity, currency] = value;\n      return new Debit({ quantity, currency, transaction, note: value.comment });\n    };\n    \n    rawArray.forEach((shortcut) => {\n      parser.parseTrade(shortcut).\n        matchWith({\n          Ok: ({ value }) => {\n            trades.push({\n              credit: makeCredit(value),\n              debit: makeDebit(value),\n            });\n          },\n          Error: ({ value }) => {\n            log.error(value);\n            errors.push(value);\n          },\n        });\n    });\n    return [trades, errors];\n  }\n\n  /**\n   * Apply a function to all entries.\n   * @param {Function} function to apply\n   * @return {Array} result of function application\n   */\n  map(fn) {\n    if (!fn) {\n      return this.entries;\n    }\n    return this.entries.map(fn);\n  }\n\n  size() {\n    return this.entries.length;\n  }\n\n  /**\n   * Get a representation of this object useful for logging or converting to yaml\n   * @param {Object} options \"byDay\", \"yaml\", \"shallow\"\n   * @return {Object<String, *>}\n   */\n  toObject(options = {}) {\n    const trades = this.getTradePairs().map(pair => ({\n      credit: pair.credit.toObject(options),\n      debit: pair.debit.toObject(options),\n    }));\n    return utils.stripFalsy({\n      id: this.id,\n      note: this.note,\n      account: this.account,\n      status: this.status,\n      utc: options.byDay ? this.utc.format('YYYY-MM-DD') : this.utc.toISOString(),\n      address: this.address,\n      party: this.party,\n      tags: this.tags,\n      credits: this.getCredits().map(t => t.toObject(options)),\n      debits: this.getDebits().map(t => t.toObject(options)),\n      trades,\n      fees: this.fees, // change to this.fees.map(f => t.toObject()) when unstub\n      details: this.details,\n    });\n  }\n\n  toString() {\n    return `Transaction: ${this.account} ${this.utc.toISOString} [${this.entries.length} entries]`;\n  }\n\n  /**\n   * Convert a transaction object to its yaml representation\n   * @param {Boolean} byDay if bucketed\n   * @return {String} YAML representation\n   */\n  toYaml(byDay) {\n    const data = this.toObject({ byDay });\n    const work = [];\n    const trades = this.getTradePairs();\n    const credits = this.getCredits().filter(entry => !entry.isTrade());\n    const debits = this.getDebits().filter(entry => !entry.isTrade());\n\n    KEYS.forEach((key) => {\n      if (R.has(key, data)) {\n        const prefix = work.length === 0 ? '-' : ' ';\n        const val = data[key];\n        if (key === 'credits' || key === 'debits') {\n          const entries = (key === 'credits' ? credits : debits);\n\n          if (entries && entries.length > 0) {\n            work.push(`${prefix} ${key}:`);\n            entries.forEach((entry) => {\n              try {\n                work.push(`    - ${entry.getFullShortcut(this)}`);\n              } catch (e) {\n                throw new Error(`Not a ${key}: ${JSON.stringify(entry)} ${typeof entry}`);\n              }\n            });\n          }\n        } else if (key === 'trades') {\n          if (trades && trades.length > 0) {\n            work.push(`${prefix} ${key}:`);\n            trades.forEach((entry) => {\n              try {\n                work.push(`    - ${entry.debit.getFullShortcut(this)}`);\n              } catch (e) {\n                throw new Error(`Not a trade: ${JSON.stringify(entry)}`);\n              }\n            });\n          }\n        } else if (key === 'tags') {\n          if (val && val.length > 0) {\n            work.push(`${prefix} tags:`);\n            val.forEach((tag) => {\n              work.push(`    - ${tag}`);\n            });\n          }\n        } else if (key === 'account') {\n          work.push(`${prefix} account: ${val.credit}`);\n        } else {\n          work.push(`${prefix} ${key}: ${val}`);\n        }\n      }\n    });\n    work.push('');\n    return work.join('\\n');\n  }\n}\n\nmodule.exports = Transaction;\n"
  ]
}
