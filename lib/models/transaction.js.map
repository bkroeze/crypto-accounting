{
  "version": 3,
  "sources": [
    "transaction.js"
  ],
  "names": [
    "R",
    "require",
    "RA",
    "Moment",
    "makeEntries",
    "utils",
    "makeError",
    "calcHashId",
    "CREDIT",
    "DEBIT",
    "ERRORS",
    "makeFees",
    "fees",
    "DEFAULT_PROPS",
    "id",
    "account",
    "credit",
    "debit",
    "status",
    "party",
    "address",
    "utc",
    "note",
    "tags",
    "entries",
    "details",
    "KEYS",
    "keysIn",
    "getProps",
    "pick",
    "allBalanced",
    "all",
    "e",
    "isBalanced",
    "getDebits",
    "filter",
    "propEq",
    "getCredits",
    "Transaction",
    "constructor",
    "props",
    "merged",
    "merge",
    "forEach",
    "key",
    "val",
    "isString",
    "console",
    "error",
    "JSON",
    "stringify",
    "TypeError",
    "INVALID_TERM",
    "toObject",
    "makeTransactions",
    "raw",
    "map",
    "tx",
    "applyToAccounts",
    "accounts",
    "applyToAccount",
    "fn",
    "getAccounts",
    "Set",
    "getAccountPath",
    "getCurrencies",
    "prop",
    "size",
    "length",
    "shortDate",
    "stripFalsyExcept",
    "format",
    "toISOString",
    "t",
    "toString",
    "toYaml",
    "byDay",
    "data",
    "work",
    "has",
    "prefix",
    "push",
    "entry",
    "shortcut",
    "tag",
    "join",
    "module",
    "exports"
  ],
  "mappings": "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",
  "file": "transaction.js",
  "sourceRoot": "../../src/models",
  "sourcesContent": [
    "/* eslint no-console: [\"error\", { allow: [\"error\"] }] */\nconst R = require('ramda');\nconst RA = require('ramda-adjunct');\nconst Moment = require('moment');\n\nconst { makeEntries } = require('./entry');\nconst utils = require('../utils/models');\nconst { makeError } = require('../utils/errors');\nconst { calcHashId } = require('../utils/numbers');\nconst { CREDIT, DEBIT, ERRORS } = require('./constants');\n\n// stub out fee descriptors\nconst makeFees = fees => fees;\n\nconst DEFAULT_PROPS = {\n  id: '',\n  account: { credit: '', debit: '' },\n  status: '',\n  party: '',\n  address: '',\n  utc: '',\n  note: '',\n  fees: [],\n  tags: [],\n  entries: [],\n  details: {},\n};\n\nconst KEYS = R.keysIn(DEFAULT_PROPS);\n\nconst getProps = R.pick(KEYS);\nconst allBalanced = R.all(e => e.isBalanced());\nconst getDebits = R.filter(R.propEq('type', DEBIT));\nconst getCredits = R.filter(R.propEq('type', CREDIT));\n\nclass Transaction {\n  /**\n   * Construct using a `props` object that must include \"utc\", and may also\n   * include \"notes\", \"tags\", and a list of transactions\n   * @param {object} props\n   */\n  constructor(props = {}) {\n    const merged = R.merge(DEFAULT_PROPS, getProps(props));\n    const { entries, fees } = merged;\n\n    KEYS.forEach((key) => {\n      if (key !== 'transactions' && key !== 'fees') {\n        let val = merged[key];\n        if (key === 'account' && RA.isString(val)) {\n          val = { debit: val, credit: val };\n        }\n        this[key] = val;\n      }\n    });\n\n    if (!this.utc) {\n      console.error(`Invalid Transaction, must have a 'utc', got: ${JSON.stringify(props)}`);\n      throw makeError(\n        TypeError,\n        ERRORS.INVALID_TERM,\n        'Invalid Transaction, must have a utc'\n      );\n    }\n    this.utc = Moment(this.utc);\n    this.entries = makeEntries(entries, this);\n    this.fees = makeFees(fees);\n    if (!this.id) {\n      this.id = calcHashId(this.toObject());\n    }\n  }\n\n  /**\n   * Create transactions from a raw list\n   * @param {Array<Object>} raw transaction objections\n   * @return {Array<Transaction>} transactions\n   */\n  static makeTransactions(raw) {\n    return raw.map(tx => new Transaction(tx));\n  }\n\n  /**\n   * Applies all entries to their correct accounts.\n   * @param {Accounts} accounts\n   * @return {Transaction} this transaction\n   */\n  applyToAccounts(accounts) {\n    this.entries.forEach(e => e.applyToAccount(accounts));\n    return this;\n  }\n\n  /**\n   * Apply a function to all entries.\n   * @param {Function} function to apply\n   */\n  forEach(fn) {\n    if (fn) {\n      this.entries.forEach(fn);\n    }\n  }\n\n  getAccounts() {\n    return new Set(this.map(e => e.getAccountPath()));\n  }\n\n  /**\n   * Get all credits from this transaction entries\n   * @return {Array<Entry} Credits\n   */\n  getCredits() {\n    return getCredits(this.entries);\n  }\n\n  /**\n   * Get the set of all currencies used in this transaction\n   */\n  getCurrencies() {\n    return new Set(this.map(R.prop('currency')));\n  }\n\n  /**\n   * Get all debits from this transaction entries\n   * @return {Array<Entry} Debits\n   */\n  getDebits() {\n    return getDebits(this.entries);\n  }\n\n  /**\n   * Test whether all debits in this transaction are balanced.\n   */\n  isBalanced() {\n    return allBalanced(this.getDebits());\n  }\n\n  /**\n   * Apply a function to all entries.\n   * @param {Function} function to apply\n   * @return {Array} result of function application\n   */\n  map(fn) {\n    if (!fn) {\n      return this.entries;\n    }\n    return this.entries.map(fn);\n  }\n\n  size() {\n    return this.entries.length;\n  }\n\n  /**\n   * Get a representation of this object useful for logging or converting to yaml\n   * @return {Object<String, *>}\n   */\n  toObject(shortDate) {\n    return utils.stripFalsyExcept({\n      id: this.id,\n      note: this.note,\n      account: this.account,\n      status: this.status,\n      utc: shortDate ? this.utc.format('YYYY-MM-DD') : this.utc.toISOString(),\n      address: this.address,\n      party: this.party,\n      tags: this.tags,\n      entries: this.entries.map(t => t.toObject()),\n      fees: this.fees, // change to this.fees.map(f => t.toObject()) when unstub\n      details: this.details,\n    }, ['entries']);\n  }\n\n  toString() {\n    return `Transaction: ${this.account} ${this.utc.toISOString} [${this.entries.length} entries]`;\n  }\n\n  /**\n   * Convert a transaction object to its yaml representation\n   * @param {Boolean} byDay if bucketed\n   * @return {String} YAML representation\n   */\n  toYaml(byDay) {\n    const data = this.toObject(byDay);\n    const work = [];\n    KEYS.forEach((key) => {\n      if (R.has(key, data)) {\n        const prefix = work.length === 0 ? '-' : ' ';\n        let val = data[key];\n        if (key === 'entries') {\n          if (val && val.length > 0) {\n            work.push('  entries:');\n            this.getDebits().forEach((entry) => {\n              work.push(`    - ${entry.shortcut}`);\n            });\n          }\n        } else if (key === 'tags') {\n          if (val && val.length > 0) {\n            work.push('  tags:')\n            val.forEach((tag) => {\n              work.push(`    - ${tag}`);\n            });\n          }\n        } else if (key === 'account') {\n          val = val.credit;\n        } else {\n          work.push(`${prefix} ${key}: ${val}`);\n        }\n      }\n    });\n    work.push('');\n    return work.join('\\n');\n  }\n}\n\nmodule.exports = Transaction;\n"
  ]
}
