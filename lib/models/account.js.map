{
  "version": 3,
  "sources": [
    "account.js"
  ],
  "names": [
    "R",
    "require",
    "RA",
    "utils",
    "CREDIT",
    "DEBIT",
    "INHERIT",
    "ERRORS",
    "makeError",
    "Lot",
    "DEFAULT_PROPS",
    "path",
    "balancing_account",
    "aliases",
    "note",
    "tags",
    "portfolio",
    "parent",
    "children",
    "virtual",
    "details",
    "KEYS",
    "keysIn",
    "getProps",
    "pick",
    "getBalanceQty",
    "e",
    "type",
    "quantity",
    "times",
    "entrySorter",
    "a",
    "b",
    "utcA",
    "getUtc",
    "utcB",
    "isBefore",
    "isAfter",
    "addIndex",
    "Account",
    "constructor",
    "props",
    "dirty",
    "entries",
    "lots",
    "merged",
    "merge",
    "forEach",
    "key",
    "val",
    "balancingAccount",
    "console",
    "error",
    "JSON",
    "stringify",
    "TypeError",
    "MISSING_PARAMETER",
    "makeChildAccounts",
    "hasBalancingAccount",
    "account",
    "getBalancingAccount",
    "isVirtualAccount",
    "isVirtual",
    "isNotVirtualAccount",
    "accounts",
    "child",
    "addEntry",
    "entry",
    "length",
    "push",
    "createBalancingEntries",
    "getEntries",
    "balancing",
    "pair",
    "currency",
    "makeBalancingClone",
    "is",
    "ReferenceError",
    "MISSING_ACCOUNT",
    "getAccount",
    "clone",
    "isString",
    "split",
    "nextChild",
    "shift",
    "ofType",
    "sort",
    "isEmpty",
    "filter",
    "getLots",
    "currencies",
    "force",
    "debits",
    "makeLots",
    "getBalances",
    "entryFilter",
    "balances",
    "isFunction",
    "qty",
    "has",
    "plus",
    "getBalancesByAccount",
    "Object",
    "values",
    "getTotalBalances",
    "childBalances",
    "keys",
    "inPath",
    "toObject",
    "stripFalsyExcept",
    "objectValsToObject",
    "map",
    "toString",
    "id",
    "module",
    "exports"
  ],
  "mappings": "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",
  "file": "account.js",
  "sourceRoot": "../../src/models",
  "sourcesContent": [
    "/* eslint no-param-reassign: off */\nconst R = require('ramda');\nconst RA = require('ramda-adjunct');\n\nconst utils = require('../utils/models');\nconst { CREDIT, DEBIT, INHERIT, ERRORS } = require('./constants');\nconst { makeError } = require('../utils/errors');\nconst Lot = require('./lot');\n\nconst DEFAULT_PROPS = {\n  path: '',\n  balancing_account: '',\n  aliases: [],\n  note: '',\n  tags: [],\n  portfolio: '',\n  parent: null,\n  children: {},\n  virtual: '%INHERIT%',\n  details: {}, // additional key-value pairs\n};\n\nconst KEYS = R.keysIn(DEFAULT_PROPS);\n\nconst getProps = R.pick(KEYS);\n\nfunction getBalanceQty(e) {\n  return e.type === DEBIT ? e.quantity : e.quantity.times(-1);\n}\n\n/**\n * Extends the sort for entry to include its insertion order, for more stable sorts.\n */\nfunction entrySorter(a, b) {\n  const utcA = a.getUtc();\n  const utcB = b.getUtc();\n  if (utcA.isBefore(utcB)) {\n    return -1;\n  }\n  if (utcA.isAfter(utcB)) {\n    return 1;\n  }\n  if (a.addIndex < b.addIndex) {\n    return -1;\n  }\n  if (a.addIndex > b.addIndex) {\n    return 1;\n  }\n  if (a.type === DEBIT && b.type === CREDIT) {\n    return 1;\n  }\n  if (a.type === CREDIT && b.type === DEBIT) {\n    return -1;\n  }\n  return 0;\n}\n\nclass Account {\n  /**\n   * Construct using a `props` object that must include \"path\", and may also\n   * include \"name\" and \"notes\"\n   * @param {object} props\n   * @Throws {TypeError} if 'path' param is missing\n   */\n  constructor(props = {}) {\n    this.dirty = {\n      entries: true,\n      lots: true,\n    };\n    this.entries = []; // not constructed using \"props\" at this point\n    this.lots = [];\n    const merged = R.merge(DEFAULT_PROPS, getProps(props));\n    let children = [];\n\n    KEYS.forEach((key) => {\n      const val = merged[key];\n      if (key === 'children') {\n        children = val;\n      } else if (key === 'balancing_account' && val !== '') {\n        this.balancingAccount = val;\n      } else {\n        this[key] = val;\n      }\n    });\n\n    if (!this.path) {\n      console.error(`Invalid Account, must have a path, got: ${JSON.stringify(props)}`);\n      throw makeError(\n        TypeError,\n        ERRORS.MISSING_PARAMETER,\n        'Invalid Account, must have a path'\n      );\n    }\n    if (this.parent) {\n      this.path = `${this.parent.path}:${this.path}`;\n    }\n\n    this.children = Account.makeChildAccounts(this, children);\n  }\n\n  /**\n   * Test if an account is a balancing account.\n   * @param {Account} account\n   * @return {Boolean} true if balancing\n   */\n  static hasBalancingAccount(account) {\n    return !!account.getBalancingAccount();\n  }\n\n  /**\n   * Test if an account is a virtual account.\n   * @param {Account} account\n   * @return {Boolean} true if virtual\n   */\n  static isVirtualAccount(account) {\n    return account.isVirtual();\n  }\n\n  /**\n   * Test if an account is not a virtual account.\n   * @param {Account} account\n   * @return {Boolean} true if not a virtual account\n   */\n  static isNotVirtualAccount(account) {\n    return !account.isVirtual();\n  }\n\n  /**\n   * Create a set of child accounts for a parent.\n   * @param {Account} parent\n   * @param {Array<Account>} children\n   * @return {Object<String, Account>} accounts keyed by path\n   */\n  static makeChildAccounts(parent, children) {\n    const accounts = {};\n    R.keysIn(children).forEach((path) => {\n      const child = children[path];\n      accounts[path] = new Account(R.merge(child, { parent, path }));\n    });\n    return accounts;\n  }\n\n  /**\n   * Add an entry to the account entries.\n   * @param {Entry} entry\n   * @return {Accounts} this object\n   */\n  addEntry(entry) {\n    entry.addIndex = this.entries.length;\n    this.entries.push(entry);\n    this.dirty.entries = true;\n    return this;\n  }\n\n  /**\n   * Create virtual \"balancing\" entries (debits) for virtual accounts to bring\n   * the total books to 0\n   * @param {Account} account which will get the balancing entries\n   * @throws {ReferenceError} if balancing account is not found\n   * @return {Accounts} this object\n   */\n  createBalancingEntries(balancingAccount) {\n    try {\n      if (!balancingAccount) {\n        return false;\n      }\n      const entries = this.getEntries();\n      entries.forEach((entry) => {\n        if (!entry.balancing && (!entry.pair || entry.currency !== entry.pair.currency)) {\n          // console.log(`Adding balancing ${this.path} -> ${balancingAccount.path}`);\n          // console.log(`entry: ${JSON.stringify(entry.toObject(), null, 2)}`);\n          balancingAccount.addEntry(entry.makeBalancingClone(balancingAccount));\n        }\n      });\n    } catch (e) {\n      if (R.is(ReferenceError, e)) {\n        console.error(e);\n        throw makeError(\n          ReferenceError,\n          ERRORS.MISSING_ACCOUNT,\n          `Cannot find balancing account ${balancingAccount}`\n        );\n      }\n      throw e;\n    }\n    return this;\n  }\n\n  /**\n   * Get a child account.\n   * @param {String} key\n   * @return {Account} account\n   * @throws {ReferenceError} if child not found\n   */\n  getAccount(key) {\n    let path = R.clone(key);\n    if (RA.isString(path)) {\n      path = path.split(':');\n    }\n    const nextChild = path.shift();\n    let child = this.children[nextChild];\n    if (!child) {\n      throw makeError(\n        ReferenceError,\n        ERRORS.MISSING_ACCOUNT,\n        `Account Not Found: ${this.path}:${nextChild}`\n      );\n    }\n    if (path.length > 0) {\n      child = child.getAccount(path);\n    }\n    return child;\n  }\n\n  /**\n   * Gets the balancing account path if directly or indirectly set via parent.\n   * @return {String} path, empty if not found\n   */\n  getBalancingAccount() {\n    if (this.balancingAccount) {\n      return this.balancingAccount;\n    }\n    if (this.parent) {\n      return this.parent.getBalancingAccount();\n    }\n    return '';\n  }\n\n  /**\n   * Get sorted entries.\n   * @param {String} typename for filter, no filtering if not given\n   * @return {Array<Entry>} Entries\n   */\n  getEntries(ofType) {\n    if (this.dirty.entries) {\n      this.entries.sort(entrySorter);\n      this.dirty.entries = false;\n      this.dirty.lots = true;\n      this.lots = null;\n    }\n    const { entries } = this;\n    if (!entries) {\n      return [];\n    }\n    if (R.isEmpty(entries)) {\n      return [];\n    }\n    if (!ofType) {\n      return entries;\n    }\n    return entries.filter(e => e.type === ofType);\n  }\n\n  /**\n   * Lazily get all lots from all accounts\n   * @param {Object<String,Currency>} currencies\n   * @param {Boolean} force recalculation if true\n   * @return {Array<Lot>} lots\n   */\n  getLots(currencies, force) {\n    if (this.isVirtual()) {\n      return [];\n    }\n    if (this.dirty.lots || force) {\n      const debits = this.getEntries(DEBIT);\n      this.lots = Lot.makeLots(currencies, debits);\n      // console.log('made lots:', this.lots.map(l => l.toObject(true)));\n    }\n    return this.lots;\n  }\n\n  /**\n   * Get current balance of each currency.\n   * @param {function} filter to apply to the entries\n   * @return {Object<String, BigNumber>} balances keyed by currency\n   */\n  getBalances(entryFilter) {\n    const balances = {};\n    let entries = this.getEntries();\n    if (RA.isFunction(entryFilter)) {\n      entries = entries.filter(entryFilter);\n    }\n    entries.forEach((e) => {\n      const qty = getBalanceQty(e);\n      if (!R.has(e.currency, balances)) {\n        balances[e.currency] = qty;\n      } else {\n        balances[e.currency] = balances[e.currency].plus(qty);\n      }\n    });\n    return balances;\n  }\n\n  /**\n   * Get current balance for each account\n   * @param {function} filter to apply to the entries\n   * @return {Object<String, BigNumber>} balances keyed by account path\n   */\n  getBalancesByAccount(entryFilter) {\n    let balances = {};\n    balances[this.path] = this.getBalances(entryFilter);\n    Object.values(this.children).forEach((child) => {\n      balances = R.merge(balances, child.getBalancesByAccount(entryFilter));\n    });\n    return balances;\n  }\n\n  /**\n   * Get Total balances, keyed by currency\n   * @param {function} filter to apply to the entries\n   * @return {Object<String, BigNumber>} balances keyed by currency\n   */\n  getTotalBalances(entryFilter) {\n    const balances = this.getBalances(entryFilter);\n    Object.values(this.children).forEach((child) => {\n      const childBalances = child.getTotalBalances(entryFilter);\n      Object.keys(childBalances).forEach((currency) => {\n        if (!R.has(currency, balances)) {\n          balances[currency] = childBalances[currency];\n        } else {\n          balances[currency] = balances[currency].plus(childBalances[currency]);\n        }\n      });\n    });\n    return balances;\n  }\n\n  /**\n   * Test path to see if this account matches, or any of its parents.\n   * @param {String} path\n   * @return {Boolean} true if this or parent matches\n   */\n  inPath(path) {\n    if (this.path === path) {\n      return true;\n    }\n    if (this.parent) {\n      return this.parent.inPath(path);\n    }\n    return false;\n  }\n\n  /**\n   * Test if this account is virtual or descended from a virtual parent\n   * @return {Boolean} true if virtual\n   */\n  isVirtual() {\n    if (this.virtual === INHERIT) {\n      if (this.parent) {\n        return this.parent.isVirtual();\n      }\n      return false;\n    }\n    return this.virtual;\n  }\n\n  /**\n   * Get a representation of this object useful for logging or converting to yaml\n   * @return {Object<String, *>}\n   */\n  toObject() {\n    return utils.stripFalsyExcept({\n      path: this.path,\n      aliases: this.aliases,\n      balancing_account: this.balancingAccount,\n      note: this.note,\n      tags: this.tags,\n      portfolio: this.portfolio,\n      children: utils.objectValsToObject(this.children),\n      entries: this.entries.map(utils.toObject),\n      virtual: this.virtual === INHERIT ? null : this.virtual,\n      details: this.details,\n    });\n  }\n\n  toString() {\n    return `Currency: ${this.id}`;\n  }\n}\n\nmodule.exports = Account;\n"
  ]
}
