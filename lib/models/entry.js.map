{
  "version": 3,
  "sources": [
    "entry.js"
  ],
  "names": [
    "R",
    "require",
    "RA",
    "utils",
    "BigNumber",
    "makeError",
    "BIG_0",
    "addBigNumbers",
    "isNegativeString",
    "positiveString",
    "calcHashId",
    "CREDIT",
    "DEBIT",
    "ERRORS",
    "SYMBOL_MAP",
    "LEDGER_COMMENTS",
    "LEDGER_LINE_COMMENT",
    "log",
    "get",
    "lineSpaces",
    "RegExp",
    "lineCommentSpaces",
    "tabRe",
    "commaRe",
    "isCommentToken",
    "startsWith",
    "lastTokenIsComment",
    "val",
    "last",
    "describeLots",
    "wrappers",
    "map",
    "wrapper",
    "lot",
    "toObject",
    "applied",
    "toFixed",
    "mergeProps",
    "props",
    "id",
    "transaction",
    "quantity",
    "currency",
    "account",
    "lots",
    "type",
    "note",
    "shortcut",
    "pair",
    "balancing",
    "virtual",
    "KEYS",
    "keysIn",
    "getProps",
    "pick",
    "hasCredits",
    "has",
    "hasDebits",
    "hasEntries",
    "isCredit",
    "propEq",
    "isDebit",
    "hasLeadingSymbol",
    "symbol",
    "slice",
    "looksNumeric",
    "getLotCredits",
    "filter",
    "prop",
    "splitComment",
    "cleaned",
    "replace",
    "e",
    "Error",
    "JSON",
    "stringify",
    "console",
    "ix",
    "indexOf",
    "tokenizeShortcut",
    "leadingSymbolMap",
    "fixLeadingSymbol",
    "token",
    "work",
    "forEach",
    "comment",
    "splitAndTrim",
    "join",
    "tokens",
    "length",
    "error",
    "TypeError",
    "INVALID_SHORTCUT",
    "push",
    "Entry",
    "constructor",
    "isString",
    "merged",
    "INVALID_TERM",
    "amount",
    "key",
    "applyShortcut",
    "isNil",
    "shallow",
    "getAccount",
    "endsWith",
    "trim",
    "arrayToEntries",
    "rawArray",
    "entryType",
    "entry",
    "objectToEntries",
    "raw",
    "entries",
    "debits",
    "credits",
    "concat",
    "shortcutToEntries",
    "rawShortcut",
    "accum",
    "connector",
    "current",
    "shortcuts",
    "shift",
    "isConnector",
    "debit",
    "credit",
    "debitIx",
    "creditIx",
    "firstAmount",
    "negativeFirst",
    "catcher",
    "err",
    "message",
    "detail",
    "maker",
    "makeEntry",
    "tryCatch",
    "setPair",
    "flexibleToEntries",
    "isObj",
    "makeEntries",
    "flatten",
    "pop",
    "numeric1",
    "numeric2",
    "applyToAccount",
    "accounts",
    "acct",
    "getAccountPath",
    "addEntry",
    "NOT_FOUND",
    "equals",
    "is",
    "eq",
    "path",
    "getLotCreditRemaining",
    "TYPE",
    "minus",
    "isTrade",
    "getFullShortcut",
    "parts",
    "split",
    "part",
    "getUtc",
    "utc",
    "setLot",
    "maxQuantity",
    "remainingLot",
    "getRemaining",
    "remainingCredit",
    "min",
    "gt",
    "inAccount",
    "contained",
    "inPath",
    "isBalanced",
    "isBalancingEntry",
    "makeBalancingClone",
    "multiplyBy",
    "posting",
    "times",
    "partner",
    "priceEach",
    "options",
    "yaml",
    "stripFalsy",
    "toString",
    "module",
    "exports"
  ],
  "mappings": "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",
  "file": "entry.js",
  "sourceRoot": "../../src/models",
  "sourcesContent": [
    "/* eslint prefer-destructuring: [\"error\", { array: false }] */\nconst R = require('ramda');\nconst RA = require('ramda-adjunct');\n\nconst utils = require('../utils/models');\nconst BigNumber = require('bignumber.js');\nconst { makeError } = require('../utils/errors');\nconst {\n  BIG_0, addBigNumbers, isNegativeString, positiveString, calcHashId,\n} = require('../utils/numbers');\nconst { CREDIT, DEBIT, ERRORS, SYMBOL_MAP, LEDGER_COMMENTS, LEDGER_LINE_COMMENT } = require('./constants');\nconst log = require('js-logger').get('c.a.models.entry');\nconst lineSpaces = new RegExp(/  /, 'g');\nconst lineCommentSpaces = /\\; */;\nconst tabRe = new RegExp(/\\t/, 'g');\nconst commaRe = new RegExp(/,/, 'g');\n\nconst isCommentToken = R.startsWith(LEDGER_LINE_COMMENT);\nconst lastTokenIsComment = (val) => isCommentToken(R.last(val));\n\nfunction describeLots(wrappers) {\n  return wrappers.map(wrapper => ({\n    ...wrapper.lot.toObject(),\n    applied: wrapper.applied.toFixed(8),\n  }));\n}\n\nconst mergeProps = props => ({\n  id: null,\n  transaction: null,\n  quantity: null,\n  currency: '',\n  account: '',\n  lots: [],\n  type: DEBIT,\n  note: '',\n  shortcut: '',\n  pair: null,\n  balancing: null, // the other entry in a balancing pair\n  virtual: false,\n  ...props,\n});\n\nconst KEYS = R.keysIn(mergeProps({}));\nconst getProps = R.pick(KEYS);\nconst hasCredits = R.has('credits');\nconst hasDebits = R.has('debits');\nconst hasEntries = R.has('entries');\nconst isCredit = R.propEq('type', 'credit');\nconst isDebit = R.propEq('type', 'debit');\n\nconst hasLeadingSymbol = (symbol, val) => {\n  return val.slice(0,1) === symbol && utils.looksNumeric(val.slice(1));\n}\n\nfunction getLotCredits(currency, lots) {\n  return lots\n    .filter(R.propEq('currency', currency))\n    .map(R.prop('applied'));\n}\n\nfunction splitComment(val) {\n  let cleaned;\n  try {\n    cleaned = val.replace(lineSpaces, ' ').replace(tabRe, ' ');\n  } catch (e) {\n    throw new Error(`Bad val: ${JSON.stringify(val, null, 2)}`);\n    console.log('could not splitComment', val);\n  }\n\n  let ix = cleaned.indexOf(LEDGER_LINE_COMMENT);\n  if (ix > -1) {\n    return [cleaned.slice(0, ix), cleaned.slice(ix).replace(lineCommentSpaces, ';')];\n  }\n  return [cleaned, null];\n}\n\nfunction tokenizeShortcut(shortcut, leadingSymbolMap = SYMBOL_MAP) {\n  const fixLeadingSymbol = (token) => {\n    let work = token;\n    leadingSymbolMap.forEach((currency, symbol) => {\n      if (hasLeadingSymbol(symbol, token)) {\n        work = `${token.slice(1)} ${currency}`;\n      }\n    });\n    return work;\n  };\n\n  // check for comment\n  let [cleaned, comment] = splitComment(shortcut);\n\n  // have to pass over string twice, first time to clean up any\n  // $100 style entries, converting to 100 USD\n  cleaned = utils.splitAndTrim(cleaned)\n        .map(fixLeadingSymbol)\n        .join(' ');\n\n  // The second time, we want to tokenize the string\n  const tokens = utils.splitAndTrim(cleaned);\n\n  // minimal shortcut: \"10 BTC\"\n  if (tokens.length < 2) {\n    console.error(`Invalid shortcut (need 2 parts): ${shortcut}`);\n    throw makeError(\n      TypeError,\n      ERRORS.INVALID_SHORTCUT,\n      `Invalid shortcut (need 2 parts): ${shortcut}`\n    );\n  }\n\n  if (comment) {\n    tokens.push(comment);\n  }\n  return tokens;\n}\n\nclass Entry {\n  /**\n   * Construct using a `props` object that must include the parent transaction\n   * @param {String|Object} shortcut string, or full object\n   * @throws {TypeError} if props cannot be parsed\n   */\n  constructor(props = { }) {\n    const work = RA.isString(props) ? { shortcut: props } : props;\n    const merged = mergeProps(getProps(work));\n    if (!merged.transaction) {\n      console.error(`Invalid Entry, must have a 'transaction', got: ${JSON.stringify(props)}`);\n      throw makeError(\n        TypeError,\n        ERRORS.INVALID_TERM,\n        'Invalid Entry, must have a parent transaction'\n      );\n    }\n\n    if (merged.shortcut && (merged.currency || merged.amount)) {\n      console.error(`Invalid Entry, can't specify a shortcut and currency/amount: ${JSON.stringify(props)}`);\n      throw makeError(\n        TypeError,\n        ERRORS.INVALID_TERM,\n        'Invalid Entry, conflicting shortcut'\n      );\n    }\n\n    KEYS.forEach((key) => {\n      this[key] = merged[key];\n    });\n\n    if (merged.shortcut) {\n      this.applyShortcut(merged.shortcut);\n    }\n\n    if (R.isNil(this.quantity)) {\n      throw makeError(\n        TypeError,\n        ERRORS.INVALID_TERM,\n        'Invalid Entry, no Quantity'\n      );\n    }\n\n    // doesn't hurt to re-wrap if it isn't already a BigNumber\n    this.quantity = new BigNumber(this.quantity);\n    if (!this.id) {\n      this.id = calcHashId(this.toObject({shallow: true}));\n    }\n\n    const account = this.getAccount();\n    if (R.endsWith(` ${account}`, this.shortcut)) {\n      this.shortcut = this.shortcut.slice(0, -account.length).trim();\n    }\n  }\n\n  /**\n   * parses a list of entries, which may be objects or strings\n   * @param {Array<Object|String} rawArray input\n   * @param {String} entryType credit or debit\n   */ \n  static arrayToEntries(rawArray, entryType, transaction) {\n    return rawArray.map((entry) => {\n      let props;\n      if (RA.isString(entry)) {\n        props = { shortcut: entry, transaction, type: entryType };\n      } else {\n        props = { ...entry, transaction, type: entryType };\n      }\n      return new Entry(props);\n    });\n  }\n\n  /**\n   * Parses a raw object with credits and/or debits array members\n   * Pair posting: debit [@|=] credit\n   * @param {String} shortcut\n   * @return {Array<Entry>} list of entries\n   * @example \"10 BTC\", \"$ 10\", \"10 BTC @ $ 8000\", \"-10 ETH @ .03 BTC\"\n   */\n  static objectToEntries(raw, transaction) {\n    let entries = [];\n    let debits = [];\n    let credits = [];\n    if (hasEntries(raw)) {\n      credits = raw.entries.filter(isCredit);\n      debits = raw.entries.filter(isDebit);\n    }\n\n    if (hasDebits(raw)) {\n      debits = R.concat(debits, raw.debits);\n    }\n    if (hasCredits(raw)) {\n      credits = R.concat(credits, raw.credits);\n    }\n\n    if (debits) {\n      debits = Entry.arrayToEntries(debits, DEBIT, transaction);\n    }\n\n    if (credits) {\n      credits = Entry.arrayToEntries(credits, CREDIT, transaction);\n    }\n\n    return R.concat(debits, credits);\n  }\n\n  /**\n   * Parses an entry \"shortcut\" into balanced Entries.\n   * Shortcut can be in three forms:\n   * - Single posting (credit): \"quantity currency [account]\"\n   *   which will have a balancing debit created for it using the transaction debit account.\n   * - Single posting (debit): \"= quantity currency [account]\"\n   * - Pair posting: debit [@|=] credit\n   *\n   * @param {String} shortcut\n   * @return {Object<string: Array<Posting>>} postings, keyed by \"credits\" and \"debits\"\n   * @throws {TypeError} if shortcut cannot be parsed\n   * @example \"10 BTC\", \"$ 10\", \"10 BTC @ $ 8000\", \"-10 ETH @ .03 BTC\"\n   */\n  static shortcutToEntries(rawShortcut, transaction, leadingSymbolMap = SYMBOL_MAP) {\n    const tokens = tokenizeShortcut(rawShortcut, leadingSymbolMap);\n    let accum = [];\n    let connector = '';\n    let current;\n    let shortcuts = [];\n\n    while (tokens.length > 0) {\n      current = tokens.shift();\n      if (!utils.isConnector(current)) {\n        accum.push(current);\n      } else {\n        if (accum.length > 0) {\n          shortcuts.push(accum);\n        }\n        connector = current;\n        accum = [];\n      }\n    }\n    if (accum.length < 2) {\n      throw makeError(\n        TypeError,\n        ERRORS.INVALID_SHORTCUT,\n        `Invalid shortcut: ${rawShortcut}`\n      );\n    }\n    shortcuts.push(accum);\n\n    if (shortcuts.length === 1) {\n      if (connector !== '=') {\n        // insert a debit at the front, without a specified account\n        // this allows the default action to be from and to the same account\n        // but if one is specified, then that is the credit account.\n        shortcuts = [shortcuts[0].slice(0, 2), shortcuts[0]];\n        connector = '=';\n      } else {\n        // a leading \"=\" connector means that this single-entry is a debit\n        // so add a matching credit.\n        shortcuts = [shortcuts[0], shortcuts[0].slice(0, 2)];\n      }\n    }\n    let ix = 0;\n    let debit;\n    let credit;\n    const entries = [];\n    while (ix < shortcuts.length) {\n      let debitIx = ix;\n      let creditIx = ix + 1;\n\n      const firstAmount = shortcuts[debitIx][0];\n      const negativeFirst = isNegativeString(firstAmount);\n      if (negativeFirst) {\n        // this is a credit, not a debit\n        // take the positive value\n        shortcuts[debitIx][0] = positiveString(firstAmount);\n        // and swap the shortcuts\n        debitIx = ix + 1;\n        creditIx = ix;\n      }\n\n      const catcher = (err) => {\n        console.error(err.message, err.detail);\n        return null;\n      }\n\n      const maker = (props) => new Entry(props);\n\n      const makeEntry = R.tryCatch(maker, catcher);\n\n      debit = makeEntry({\n        shortcut: shortcuts[debitIx].join(' '),\n        transaction,\n        type: DEBIT,\n      });\n      credit = makeEntry({\n        shortcut: shortcuts[creditIx].join(' '),\n        transaction,\n        type: CREDIT,\n      });\n\n      if (credit && debit) {\n        if (negativeFirst) {\n          credit.setPair(debit, connector === '@');\n        } else {\n          debit.setPair(credit, connector === '@');\n        }\n      }\n      if (debit) {\n        entries.push(debit);\n      };\n      if (credit) {\n        entries.push(credit);\n      };\n      ix += 2;\n    }\n    return entries;\n  }\n\n  /**\n   * Parses an one or more entries from a yaml-style \"entry\".\n   * This means it may be:\n   * - A string: shortcut\n   * - An object: with one or both of \"credits\" or \"debits\" fields\n   * @param {Object|String} raw object to parse\n   * @return {Array<Entry>} List of entries parsed\n   */\n  static flexibleToEntries(raw, transaction) {\n    if (RA.isString(raw)) {\n      return Entry.shortcutToEntries(raw, transaction);\n    }\n    if (RA.isObj(raw)) {\n      return Entry.objectToEntries(raw, transaction);\n    }\n    console.error('Invalid Entry', raw);\n    throw makeError(\n      TypeError,\n      ERRORS.INVALID_SHORTCUT,\n      'Invalid Entry: cannot parse'\n    );\n  }\n\n  /**\n   * Parse an entire list of shortcut or object entries and return a list of Entries\n   * @param {Array<Object|String}} entries\n   * @param {Transaction} transaction parent\n   */\n  static makeEntries(entries, transaction) {\n    return R.flatten(entries.map(entry => Entry.flexibleToEntries(entry, transaction)));\n  }\n\n  static tokenizeShortcut (shortcut, leadingSymbolMap) {\n    return tokenizeShortcut(shortcut, leadingSymbolMap);\n  }\n\n  /**\n   * Parse and apply the shortcut to this object.\n   * @param {String} shortcut\n   * @param {Map} leadingSymbols to use, defaulting to {'$': 'USD', '£': 'GBP', '€': EUR'}\n   */\n  applyShortcut(shortcut, leadingSymbolMap = SYMBOL_MAP) {\n    const tokens = Entry.tokenizeShortcut(shortcut, leadingSymbolMap);\n\n    if (lastTokenIsComment(tokens)) {\n      this.note = tokens.pop().slice(1).trim(); // strip leading comment char\n    }\n\n    if (tokens.length > 3) {\n      throw makeError(\n        TypeError,\n        ERRORS.INVALID_SHORTCUT,\n        `Invalid shortcut (unknown extra fields): ${shortcut}`\n      );\n    }\n    // determine which token is the currency\n    let quantity;\n    let currency;\n\n    const numeric1 = utils.looksNumeric(tokens[0]);\n    const numeric2 = utils.looksNumeric(tokens[1]);\n\n    if (tokens.length === 3) {\n      this.account = tokens[2];\n    }\n\n    if (numeric1 && numeric2) {\n      throw makeError(\n        TypeError,\n        ERRORS.INVALID_SHORTCUT,\n        `Invalid Posting, two numeric in shortcut: ${shortcut}`\n      );\n    }\n\n    if (!(numeric1 || numeric2)) {\n      throw makeError(\n        TypeError,\n        ERRORS.INVALID_SHORTCUT,\n        `Invalid Posting, no numeric in shortcut: ${shortcut}`\n      );\n    }\n\n    if (numeric1) {\n      [quantity, currency] = tokens;\n    } else {\n      [currency, quantity] = tokens;\n    }\n\n    quantity = quantity.replace(commaRe, '');\n    this.quantity = BigNumber(quantity);\n    this.currency = currency;\n  }\n\n  /**\n   * Add this entry to the correct account.\n   * @param {Accounts} Accounts\n   * @return {Account} account for this entry\n   */\n  applyToAccount(accounts) {\n    let acct;\n    try {\n      acct = accounts.get(this.getAccountPath());\n      acct.addEntry(this);\n    } catch (e) {\n      if (e.message === ERRORS.NOT_FOUND) {\n        console.error(`Warning, invalid journal, missing account ${this.getAccountPath()}`);\n      }\n    }\n    return acct;\n  }\n\n  equals(entry) {\n    return (\n      entry\n        && R.is(Entry, entry)\n        && this.quantity.eq(entry.quantity)\n        && this.currency === entry.currency\n        && this.type === entry.type\n    );\n  }\n\n  /**\n   * Get the account for this entry, defaulting to the transaction account for this\n   * type if not directly set.\n   * @return {Account} Account\n   */\n  getAccount() {\n    return this.account || this.transaction.account[this.type];\n  }\n\n  /**\n   * Return the account path\n   * @throws {TypeError} if none\n   */\n  getAccountPath() {\n    const account = this.getAccount();\n    if (!account) {\n      console.error('no account!', this);\n      throw makeError(\n        TypeError,\n        ERRORS.INVALID_SHORTCUT,\n        'invalid account path'\n      );\n    }\n    if (RA.isString(account)) {\n      return account;\n    }\n    return account.path;\n  }\n\n  /**\n   * Get the amount remaining of this credit, not yet applied to lots.\n   * @return {BigNumber} amount remaining\n   */\n  getLotCreditRemaining() {\n    if (this.TYPE === DEBIT) {\n      return BIG_0;\n    }\n\n    const credits = addBigNumbers(getLotCredits(this.currency, this.lots));\n    return this.quantity.minus(credits);\n  }\n\n  /**\n   * An entry is a \"trade\" if it was exchanged for a different currency\n   */\n  isTrade() {\n    return (this.pair && this.pair.currency !== this.currency);\n  }\n\n  /**\n   * Get a shortcut for this entry.  If it is a debit and a trade then add that to the shortcut.\n   */\n  getFullShortcut(transaction = this) {\n    const parts = this.shortcut.split(' ').slice(0, 2);\n    if (this.account && this.account !== transaction.account[this.type]) {\n      parts.push(this.account);\n    }\n    if (this.type === DEBIT && this.isTrade()) {\n      parts.push('@');\n      this.pair.shortcut\n        .split(' ')\n        .slice(0, 2)\n        .forEach((part) => { parts.push(part); });\n      \n      if (this.pair.account && this.pair.account !== transaction.account[this.pair.type]) {\n        parts.push(this.pair.account);\n      }\n    }\n    return parts.join(' ');\n  }\n\n  /**\n   * Get the date for this entry, defaulting to the transaction date if not directly set.\n   * @return {Moment} date\n   */\n  getUtc() {\n    return this.transaction.utc;\n  }\n\n  /**\n   * Apply as much as possible of our remaining credit amount to the specified lot.\n   * @param {Lot} lot\n   * @param {BigNumber} maximum to apply\n   * @return {BigNumber} how much was applied to the lot\n   */\n  setLot(lot, maxQuantity) {\n    let applied = this.quantity;\n    if (this.type === CREDIT) {\n      const remainingLot = lot.getRemaining();\n      const remainingCredit = this.getLotCreditRemaining();\n      applied = BigNumber.min(remainingCredit, remainingLot, maxQuantity);\n      /* console.log(`rl = ${remainingLot.toFixed(2)}\n         rc = ${remainingCredit.toFixed(2)}\n         max = ${maxQuantity.toFixed(2)}\n         ap = ${applied}`); */\n    }\n    if (applied.gt(BIG_0)) {\n      this.lots.push({ lot, applied });\n    }\n    return applied;\n  }\n\n  /**\n   * Test whether this entry is in the specified account or one of its parents.\n   * @param {String} path\n   * @return {Boolean} true if found\n   */\n  inAccount(path) {\n    const acct = this.getAccount();\n    if (RA.isString(acct)) {\n      return RA.contained(acct.split(':'), path);\n    }\n    return acct.inPath(path);\n  }\n\n  /**\n   * Test whether this entry has a proper balancing entry.\n   * @return {Boolean} true if balanced\n   */\n  isBalanced() {\n    return !!(this.pair && (\n      this.pair.currency !== this.currency\n        || this.pair.getAccount() !== this.getAccount()\n    ));\n  }\n\n  /**\n   * Test whether this is a balancing entry.\n   * @return {Boolean} true if balancing\n   */\n  isBalancingEntry() {\n    return this.balancing && this.virtual;\n  }\n\n  /**\n   * Make a balancing pair entry.\n   * @param {Account} account\n   * @return {Entry} new pair entry\n   */\n  makeBalancingClone(account) {\n    this.balancing = new Entry({\n      transaction: this.transaction,\n      quantity: this.quantity,\n      currency: this.currency,\n      account: account.path,\n      type: this.type === CREDIT ? DEBIT : CREDIT,\n      balancing: this,\n      virtual: true,\n    });\n    return this.balancing;\n  }\n\n  /**\n   * Multiplies the current quantity by the quantity in the passed `Posting`.\n   * @param {Posting} posting\n   * @return {Posting} this\n   */\n  multiplyBy(posting) {\n    this.quantity = this.quantity.times(posting.quantity);\n    return this;\n  }\n\n  /**\n   * Set the \"other side\" of the entry on this and its partner.\n   * @param {Entry} other side (credit if this is debit, debit if this is credit)\n   * @param {Boolean} true if the price is specified as \"per each\"\n   */\n  setPair(partner, priceEach) {\n    this.pair = partner;\n    if (priceEach) {\n      // price specified as 'each', so it needs to be multiplied by\n      // this quantity\n      partner.multiplyBy(this);\n    }\n    if (partner.pair !== this) {\n      // set the partner, but don't multiply\n      partner.setPair(this, false);\n    }\n  }\n\n  /**\n   * Get a representation of this object useful for logging or converting to yaml\n   * @param {options} object with optional \"shallow\" and \"yaml\" fields\n   * @return {Object<String, *>}\n   */\n  toObject(options = {}) {\n    const {shallow, yaml} = options;\n    const props = {\n      id: this.id,\n      quantity: this.quantity.toFixed(8),\n      currency: this.currency,\n      account: this.getAccountPath(),\n      type: this.type,\n      note: this.note,\n      virtual: this.virtual,\n    };\n\n    if (!yaml) {\n      props.pair = (!this.pair || shallow) ? null : this.pair.toObject({ yaml, shallow: true});\n      props.balancing = (!this.balancing || shallow) ? null : this.balancing.toObject({ yaml, shallow: true });\n      props.lots = shallow ? null : describeLots(this.lots);\n    }\n\n    return utils.stripFalsy(props);\n  }\n\n  toString() {\n    return `Entry (${this.type}): ${this.quantity.toFixed(8)} ${this.currency} ${this.getAccount()}`;\n  }\n}\n\nmodule.exports = Entry;\n"
  ]
}
