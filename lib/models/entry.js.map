{
  "version": 3,
  "sources": [
    "entry.js"
  ],
  "names": [
    "R",
    "require",
    "RA",
    "utils",
    "BigNumber",
    "makeError",
    "BIG_0",
    "addBigNumbers",
    "isNegativeString",
    "positiveString",
    "CREDIT",
    "DEBIT",
    "ERRORS",
    "describeLots",
    "wrappers",
    "map",
    "wrapper",
    "lot",
    "toObject",
    "applied",
    "toFixed",
    "mergeProps",
    "props",
    "id",
    "transaction",
    "quantity",
    "currency",
    "account",
    "lots",
    "type",
    "note",
    "shortcut",
    "pair",
    "balancing",
    "virtual",
    "KEYS",
    "keysIn",
    "getProps",
    "pick",
    "hasCredits",
    "has",
    "hasDebits",
    "getLotCredits",
    "filter",
    "propEq",
    "prop",
    "Entry",
    "constructor",
    "work",
    "isString",
    "merged",
    "console",
    "error",
    "JSON",
    "stringify",
    "TypeError",
    "INVALID_TERM",
    "amount",
    "forEach",
    "key",
    "applyShortcut",
    "isNil",
    "arrayToEntries",
    "rawArray",
    "entryType",
    "entry",
    "objectToEntries",
    "raw",
    "entries",
    "debits",
    "concat",
    "credits",
    "shortcutToEntries",
    "rawShortcut",
    "parts",
    "splitAndTrim",
    "length",
    "INVALID_SHORTCUT",
    "accum",
    "connector",
    "current",
    "shortcuts",
    "shift",
    "isConnector",
    "push",
    "slice",
    "ix",
    "debit",
    "credit",
    "debitIx",
    "creditIx",
    "firstAmount",
    "negativeFirst",
    "join",
    "setPair",
    "flexibleToEntries",
    "isObj",
    "makeEntries",
    "flatten",
    "numeric1",
    "looksNumeric",
    "numeric2",
    "applyToAccount",
    "accounts",
    "acct",
    "get",
    "getAccountPath",
    "addEntry",
    "e",
    "message",
    "NOT_FOUND",
    "equals",
    "is",
    "eq",
    "getAccount",
    "path",
    "getLotCreditRemaining",
    "TYPE",
    "minus",
    "getUtc",
    "utc",
    "setLot",
    "maxQuantity",
    "remainingLot",
    "getRemaining",
    "remainingCredit",
    "min",
    "gt",
    "inAccount",
    "contained",
    "split",
    "inPath",
    "isBalanced",
    "isBalancingEntry",
    "makeBalancingClone",
    "multiplyBy",
    "posting",
    "times",
    "partner",
    "priceEach",
    "shallow",
    "stripFalsyExcept",
    "toString",
    "module",
    "exports"
  ],
  "mappings": "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",
  "file": "entry.js",
  "sourceRoot": "../../src/models",
  "sourcesContent": [
    "/* eslint prefer-destructuring: [\"error\", { array: false }] */\nconst R = require('ramda');\nconst RA = require('ramda-adjunct');\n\nconst utils = require('../utils/models');\nconst BigNumber = require('bignumber.js');\nconst { makeError } = require('../utils/errors');\nconst {\n  BIG_0, addBigNumbers, isNegativeString, positiveString,\n} = require('../utils/numbers');\nconst { CREDIT, DEBIT, ERRORS } = require('./constants');\n\nfunction describeLots(wrappers) {\n  return wrappers.map(wrapper => ({\n    ...wrapper.lot.toObject(),\n    applied: wrapper.applied.toFixed(8),\n  }));\n}\n\nconst mergeProps = props => ({\n  id: null,\n  transaction: null,\n  quantity: null,\n  currency: '',\n  account: '',\n  lots: [],\n  type: DEBIT,\n  note: '',\n  shortcut: '',\n  pair: null,\n  balancing: null, // the other entry in a balancing pair\n  virtual: false,\n  ...props,\n});\n\nconst KEYS = R.keysIn(mergeProps({}));\nconst getProps = R.pick(KEYS);\nconst hasCredits = R.has('credits');\nconst hasDebits = R.has('debits');\n\nfunction getLotCredits(currency, lots) {\n  return lots\n    .filter(R.propEq('currency', currency))\n    .map(R.prop('applied'));\n}\n\nclass Entry {\n  /**\n   * Construct using a `props` object that must include the parent transaction\n   * @param {String|Object} shortcut string, or full object\n   * @throws {TypeError} if props cannot be parsed\n   */\n  constructor(props = { }) {\n    const work = RA.isString(props) ? { shortcut: props } : props;\n    const merged = mergeProps(getProps(work));\n    if (!merged.transaction) {\n      console.error(`Invalid Entry, must have a 'transaction', got: ${JSON.stringify(props)}`);\n      throw makeError(\n        TypeError,\n        ERRORS.INVALID_TERM,\n        'Invalid Entry, must have a parent transaction'\n      );\n    }\n\n    if (merged.shortcut && (merged.currency || merged.amount)) {\n      console.error(`Invalid Entry, can't specify a shortcut and currency/amount: ${JSON.stringify(props)}`);\n      throw makeError(\n        TypeError,\n        ERRORS.INVALID_TERM,\n        'Invalid Entry, conflicting shortcut'\n      );\n    }\n\n    KEYS.forEach((key) => {\n      this[key] = merged[key];\n    });\n\n    if (merged.shortcut) {\n      this.applyShortcut(merged.shortcut);\n    }\n\n    if (R.isNil(this.quantity)) {\n      throw makeError(\n        TypeError,\n        ERRORS.INVALID_TERM,\n        'Invalid Entry, no Quantity'\n      );\n    }\n\n    // doesn't hurt to re-wrap if it isn't already a BigNumber\n    this.quantity = new BigNumber(this.quantity);\n  }\n\n  /**\n   * parses a list of entries, which may be objects or strings\n   * @param {Array<Object|String} rawArray input\n   * @param {String} entryType credit or debit\n   */\n  static arrayToEntries(rawArray, entryType, transaction) {\n    return rawArray.map((entry) => {\n      let props;\n      if (RA.isString(entry)) {\n        props = { shortcut: entry, transaction, type: entryType };\n      } else {\n        props = { ...entry, transaction, type: entryType };\n      }\n      return new Entry(props);\n    });\n  }\n\n  /**\n   * Parses a raw object with credits and/or debits array members\n   * Pair posting: debit [@|=] credit\n   * @param {String} shortcut\n   * @return {Array<Entry>} list of entries\n   * @example \"10 BTC\", \"$ 10\", \"10 BTC @ $ 8000\", \"-10 ETH @ .03 BTC\"\n   */\n  static objectToEntries(raw, transaction) {\n    let entries = [];\n    if (hasDebits(raw)) {\n      entries = Entry.arrayToEntries(raw.debits, DEBIT, transaction);\n    }\n    if (hasCredits(raw)) {\n      entries = R.concat(entries, Entry.arrayToEntries(raw.credits, CREDIT, transaction));\n    }\n\n    return entries;\n  }\n\n  /**\n   * Parses an entry \"shortcut\" into balanced Entries.\n   * Shortcut can be in three forms:\n   * - Single posting (credit): \"quantity currency [account]\"\n   *   which will have a balancing debit created for it using the transaction debit account.\n   * - Single posting (debit): \"= quantity currency [account]\"\n   * - Pair posting: debit [@|=] credit\n   *\n   * @param {String} shortcut\n   * @return {Object<string: Array<Posting>>} postings, keyed by \"credits\" and \"debits\"\n   * @throws {TypeError} if shortcut cannot be parsed\n   * @example \"10 BTC\", \"$ 10\", \"10 BTC @ $ 8000\", \"-10 ETH @ .03 BTC\"\n   */\n  static shortcutToEntries(rawShortcut, transaction) {\n    const parts = utils.splitAndTrim(rawShortcut);\n    // minimal shortcut: \"10 BTC\"\n    if (parts.length < 2) {\n      throw makeError(\n        TypeError,\n        ERRORS.INVALID_SHORTCUT,\n        `Invalid shortcut: ${rawShortcut}`\n      );\n    }\n\n    let accum = [];\n    let connector = '';\n    let current;\n    let shortcuts = [];\n\n    while (parts.length > 0) {\n      current = parts.shift();\n      if (!utils.isConnector(current)) {\n        accum.push(current);\n      } else {\n        if (accum.length > 0) {\n          shortcuts.push(accum);\n        }\n        connector = current;\n        accum = [];\n      }\n    }\n    if (accum.length < 2) {\n      throw makeError(\n        TypeError,\n        ERRORS.INVALID_SHORTCUT,\n        `Invalid shortcut: ${rawShortcut}`\n      );\n    }\n    shortcuts.push(accum);\n\n    if (shortcuts.length === 1) {\n      if (connector !== '=') {\n        // insert a debit at the front, without a specified account\n        // this allows the default action to be from and to the same account\n        // but if one is specified, then that is the credit account.\n        shortcuts = [shortcuts[0].slice(0, 2), shortcuts[0]];\n        connector = '=';\n      } else {\n        // a leading \"=\" connector means that this single-entry is a debit\n        // so add a matching credit.\n        shortcuts = [shortcuts[0], shortcuts[0].slice(0, 2)];\n      }\n    }\n    let ix = 0;\n    let debit;\n    let credit;\n    const entries = [];\n    while (ix < shortcuts.length) {\n      let debitIx = ix;\n      let creditIx = ix + 1;\n\n      const firstAmount = shortcuts[debitIx][0];\n      const negativeFirst = isNegativeString(firstAmount);\n      if (negativeFirst) {\n        // this is a credit, not a debit\n        // take the positive value\n        shortcuts[debitIx][0] = positiveString(firstAmount);\n        // and swap the shortcuts\n        debitIx = ix + 1;\n        creditIx = ix;\n      }\n\n      debit = new Entry({\n        shortcut: shortcuts[debitIx].join(' '),\n        transaction,\n        type: DEBIT,\n      });\n      credit = new Entry({\n        shortcut: shortcuts[creditIx].join(' '),\n        transaction,\n        type: CREDIT,\n      });\n\n      if (negativeFirst) {\n        credit.setPair(debit, connector === '@');\n      } else {\n        debit.setPair(credit, connector === '@');\n      }\n      entries.push(debit);\n      entries.push(credit);\n      ix += 2;\n    }\n    return entries;\n  }\n\n  /**\n   * Parses an one or more entries from a yaml-style \"entry\".\n   * This means it may be:\n   * - A string: shortcut\n   * - An object: with one or both of \"credits\" or \"debits\" fields\n   * @param {Object|String} raw object to parse\n   * @return {Array<Entry>} List of entries parsed\n   */\n  static flexibleToEntries(raw, transaction) {\n    if (RA.isString(raw)) {\n      return Entry.shortcutToEntries(raw, transaction);\n    }\n    if (RA.isObj(raw)) {\n      return Entry.objectToEntries(raw, transaction);\n    }\n    console.error('Invalid Entry', raw);\n    throw makeError(\n      TypeError,\n      ERRORS.INVALID_SHORTCUT,\n      'Invalid Entry: cannot parse'\n    );\n  }\n\n  /**\n   * Parse an entire list of shortcut or object entries and return a list of Entries\n   * @param {Array<Object|String}} entries\n   * @param {Transaction} transaction parent\n   */\n  static makeEntries(entries, transaction) {\n    return R.flatten(entries.map(entry => Entry.flexibleToEntries(entry, transaction)));\n  }\n\n  /**\n   * Parse and apply the shortcut to this object.\n   * @param {String} shortcut\n   */\n  applyShortcut(shortcut) {\n    const parts = utils.splitAndTrim(shortcut);\n    // minimal shortcut: \"10 BTC\"\n    if (parts.length !== 2 && parts.length !== 3) {\n      throw makeError(\n        TypeError,\n        ERRORS.INVALID_SHORTCUT,\n        `Invalid shortcut: ${shortcut}`\n      );\n    }\n    // determine which part is the currency\n    let quantity;\n    let currency;\n\n    const numeric1 = utils.looksNumeric(parts[0]);\n    const numeric2 = utils.looksNumeric(parts[1]);\n\n    if (parts.length === 3) {\n      this.account = parts[2];\n    }\n\n    if (numeric1 && numeric2) {\n      throw makeError(\n        TypeError,\n        ERRORS.INVALID_SHORTCUT,\n        `Invalid Posting, two numeric in shortcut: ${shortcut}`\n      );\n    }\n\n    if (!(numeric1 || numeric2)) {\n      throw makeError(\n        TypeError,\n        ERRORS.INVALID_SHORTCUT,\n        `Invalid Posting, no numeric in shortcut: ${shortcut}`\n      );\n    }\n\n    if (numeric1) {\n      [quantity, currency] = parts;\n    } else {\n      [currency, quantity] = parts;\n    }\n    this.quantity = BigNumber(quantity);\n    this.currency = currency;\n  }\n\n  /**\n   * Add this entry to the correct account.\n   * @param {Accounts} Accounts\n   * @return {Account} account for this entry\n   */\n  applyToAccount(accounts) {\n    let acct;\n    try {\n      acct = accounts.get(this.getAccountPath());\n      acct.addEntry(this);\n    } catch (e) {\n      if (e.message === ERRORS.NOT_FOUND) {\n        console.error(`Warning, invalid journal, missing account ${this.getAccountPath()}`);\n      }\n    }\n    return acct;\n  }\n\n  equals(entry) {\n    return (\n      entry\n        && R.is(Entry, entry)\n        && this.quantity.eq(entry.quantity)\n        && this.currency === entry.currency\n        && this.type === entry.type\n    );\n  }\n\n  /**\n   * Get the account for this entry, defaulting to the transaction account for this\n   * type if not directly set.\n   * @return {Account} Account\n   */\n  getAccount() {\n    return this.account || this.transaction.account[this.type];\n  }\n\n  /**\n   * Return the account path\n   * @throws {TypeError} if none\n   */\n  getAccountPath() {\n    const account = this.getAccount();\n    if (!account) {\n      console.error('no account!', this);\n      throw makeError(\n        TypeError,\n        ERRORS.INVALID_SHORTCUT,\n        'invalid account path'\n      );\n    }\n    if (RA.isString(account)) {\n      return account;\n    }\n    return account.path;\n  }\n\n  /**\n   * Get the amount remaining of this credit, not yet applied to lots.\n   * @return {BigNumber} amount remaining\n   */\n  getLotCreditRemaining() {\n    if (this.TYPE === DEBIT) {\n      return BIG_0;\n    }\n\n    const credits = addBigNumbers(getLotCredits(this.currency, this.lots));\n    return this.quantity.minus(credits);\n  }\n\n  /**\n   * Get the date for this entry, defaulting to the transaction date if not directly set.\n   * @return {Moment} date\n   */\n  getUtc() {\n    return this.transaction.utc;\n  }\n\n  /**\n   * Apply as much as possible of our remaining credit amount to the specified lot.\n   * @param {Lot} lot\n   * @param {BigNumber} maximum to apply\n   * @return {BigNumber} how much was applied to the lot\n   */\n  setLot(lot, maxQuantity) {\n    let applied = this.quantity;\n    if (this.type === CREDIT) {\n      const remainingLot = lot.getRemaining();\n      const remainingCredit = this.getLotCreditRemaining();\n      applied = BigNumber.min(remainingCredit, remainingLot, maxQuantity);\n      /* console.log(`rl = ${remainingLot.toFixed(2)}\n         rc = ${remainingCredit.toFixed(2)}\n         max = ${maxQuantity.toFixed(2)}\n         ap = ${applied}`); */\n    }\n    if (applied.gt(BIG_0)) {\n      this.lots.push({ lot, applied });\n    }\n    return applied;\n  }\n\n  /**\n   * Test whether this entry is in the specified account or one of its parents.\n   * @param {String} path\n   * @return {Boolean} true if found\n   */\n  inAccount(path) {\n    const acct = this.getAccount();\n    if (RA.isString(acct)) {\n      return RA.contained(acct.split(':'), path);\n    }\n    return acct.inPath(path);\n  }\n\n  /**\n   * Test whether this entry has a proper balancing entry.\n   * @return {Boolean} true if balanced\n   */\n  isBalanced() {\n    return !!(this.pair && (\n      this.pair.currency !== this.currency\n        || this.pair.getAccount() !== this.getAccount()\n    ));\n  }\n\n  /**\n   * Test whether this is a balancing entry.\n   * @return {Boolean} true if balancing\n   */\n  isBalancingEntry() {\n    return this.balancing && this.virtual;\n  }\n\n  /**\n   * Make a balancing pair entry.\n   * @param {Account} account\n   * @return {Entry} new pair entry\n   */\n  makeBalancingClone(account) {\n    this.balancing = new Entry({\n      transaction: this.transaction,\n      quantity: this.quantity,\n      currency: this.currency,\n      account: account.path,\n      type: this.type === CREDIT ? DEBIT : CREDIT,\n      balancing: this,\n      virtual: true,\n    });\n    return this.balancing;\n  }\n\n  /**\n   * Multiplies the current quantity by the quantity in the passed `Posting`.\n   * @param {Posting} posting\n   * @return {Posting} this\n   */\n  multiplyBy(posting) {\n    this.quantity = this.quantity.times(posting.quantity);\n    return this;\n  }\n\n  /**\n   * Set the \"other side\" of the entry on this and its partner.\n   * @param {Entry} other side (credit if this is debit, debit if this is credit)\n   * @param {Boolean} true if the price is specified as \"per each\"\n   */\n  setPair(partner, priceEach) {\n    this.pair = partner;\n    if (priceEach) {\n      // price specified as 'each', so it needs to be multiplied by\n      // this quantity\n      partner.multiplyBy(this);\n    }\n    if (partner.pair !== this) {\n      // set the partner, but don't multiply\n      partner.setPair(this, false);\n    }\n  }\n\n  /**\n   * Get a representation of this object useful for logging or converting to yaml\n   * @param {Boolean} shallow - reduce output of child objects if true\n   * @return {Object<String, *>}\n   */\n  toObject(shallow) {\n    return utils.stripFalsyExcept({\n      id: this.id,\n      quantity: this.quantity.toFixed(8),\n      currency: this.currency,\n      account: this.getAccountPath(),\n      type: this.type,\n      pair: (!this.pair || shallow) ? null : this.pair.toObject(true),\n      balancing: (!this.balancing || shallow) ? null : this.balancing.toObject(true),\n      lots: shallow ? null : describeLots(this.lots),\n      note: this.note,\n      virtual: this.virtual,\n    });\n  }\n\n  toString() {\n    return `Entry (${this.type}): ${this.quantity.toFixed(8)} ${this.currency} ${this.getAccount()}`;\n  }\n}\n\nmodule.exports = Entry;\n"
  ]
}
