{
  "version": 3,
  "sources": [
    "currencyprices.js"
  ],
  "names": [
    "SortedArray",
    "require",
    "Moment",
    "R",
    "RA",
    "PairPrice",
    "dates",
    "arrayToObjects",
    "ERRORS",
    "makeError",
    "ensureMoment",
    "work",
    "isMoment",
    "isString",
    "isObj",
    "has",
    "utc",
    "TypeError",
    "INVALID_TERM",
    "CurrencyPrices",
    "constructor",
    "prices",
    "compareByDate",
    "get",
    "ix",
    "array",
    "length",
    "findNearest",
    "within",
    "RangeError",
    "EMPTY",
    "searchUtc",
    "diff",
    "Number",
    "MAX_SAFE_INTEGER",
    "lo",
    "hi",
    "mid",
    "currentDiff",
    "currentDate",
    "val",
    "Math",
    "abs",
    "isBefore",
    "isNil",
    "OUT_OF_RANGE",
    "toISOString",
    "forEach",
    "fn",
    "map",
    "search",
    "NOT_FOUND",
    "toObject",
    "module",
    "exports"
  ],
  "mappings": "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",
  "file": "currencyprices.js",
  "sourceRoot": "../../src/models",
  "sourcesContent": [
    "\nconst SortedArray = require('sorted-array');\nconst Moment = require('moment');\nconst R = require('ramda');\nconst RA = require('ramda-adjunct');\n\nconst PairPrice = require('./pairprice');\nconst dates = require('../utils/dates');\nconst { arrayToObjects } = require('../utils/models');\nconst { ERRORS } = require('./constants');\nconst { makeError } = require('../utils/errors');\n\nfunction ensureMoment(work) {\n  if (Moment.isMoment(work)) {\n    return work;\n  } if (RA.isString(work)) {\n    return Moment(work);\n  } if (RA.isObj(work) && R.has('utc', work)) {\n    return ensureMoment(work.utc);\n  }\n  throw makeError(TypeError, ERRORS.INVALID_TERM, `Invalid search term: ${work}`);\n}\n\n/**\n * A price history for a specific currency.\n */\nclass CurrencyPrices extends SortedArray {\n  constructor(prices) {\n    super(prices || [], dates.compareByDate);\n  }\n\n  get(ix) {\n    return this.array[ix];\n  }\n\n  get length() {\n    return this.array.length;\n  }\n\n  /**\n   * Get the element nearest in date to `utc`\n   * @param {Moment} utc\n   * @param {Integer} within seconds (no limit if not given or null)\n   * @return {PairPrice} nearest price\n   */\n  findNearest(utc, within = null) {\n    if (this.length === 0) {\n      throw makeError(RangeError, ERRORS.EMPTY, 'Price list empty');\n    }\n    const searchUtc = ensureMoment(utc);\n    let diff = Number.MAX_SAFE_INTEGER;\n    let lo = 0;\n    let hi = this.length - 1;\n    let mid;\n    let currentDiff;\n    let currentDate;\n    let val = this.get(0);\n\n    while (lo <= hi) {\n      mid = lo + (hi - lo) / 2 >>> 0;\n      currentDate = this.get(mid).utc;\n      currentDiff = Math.abs(searchUtc.diff(currentDate));\n      if (currentDiff < diff) {\n        diff = currentDiff;\n        val = this.get(mid);\n      }\n      if (currentDate.isBefore(searchUtc)) {\n        lo = mid + 1;\n      } else {\n        hi = mid - 1;\n      }\n    }\n    if (!R.isNil(within) && diff > (within * 1000)) {\n      throw makeError(RangeError, ERRORS.OUT_OF_RANGE, `Cannot find a price at ${searchUtc.toISOString()} within ${within} seconds`);\n    }\n    return val;\n  }\n\n  forEach(fn) {\n    this.array.forEach(fn);\n  }\n\n  map(fn) {\n    return this.array.map(fn);\n  }\n\n  /**\n   * Get the price nearest the date.\n   * @param {String|Moment} utc\n   * @return {PairPrice} price\n   */\n  search(utc) {\n    const searchUtc = Moment(utc);\n    const ix = super.search(searchUtc);\n    if (ix === -1) {\n      throw new RangeError(ERRORS.NOT_FOUND);\n    }\n    return this.get(ix);\n  }\n\n  /**\n   * Get a representation of this object useful for logging or converting to yaml\n   * @return {Array<Object>}\n   */\n  toObject() {\n    return arrayToObjects(this);\n  }\n}\n\nmodule.exports = CurrencyPrices;\n"
  ]
}
