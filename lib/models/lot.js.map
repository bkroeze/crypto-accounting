{
  "version": 3,
  "sources": [
    "lot.js"
  ],
  "names": [
    "Moment",
    "require",
    "R",
    "Entry",
    "utils",
    "DEBIT",
    "addBigNumbers",
    "BIG_0",
    "getApplied",
    "map",
    "prop",
    "makeCreditObjects",
    "wrappers",
    "wrapper",
    "credit",
    "toObject",
    "applied",
    "toFixed",
    "makeDebitObjects",
    "debit",
    "Lot",
    "constructor",
    "account",
    "getAccount",
    "currency",
    "debits",
    "credits",
    "utc",
    "getUtc",
    "addDebit",
    "compare",
    "a",
    "b",
    "utcA",
    "utcB",
    "isBefore",
    "isLot",
    "currencies",
    "type",
    "curr",
    "isFiat",
    "balancing",
    "makeLots",
    "lot",
    "filter",
    "d",
    "addCredit",
    "maxQuantity",
    "setLot",
    "gt",
    "push",
    "quantity",
    "getRemaining",
    "getPurchasePriceEach",
    "pricehistory",
    "fiat",
    "transCurrencies",
    "within",
    "pair",
    "eachPrice",
    "div",
    "translation",
    "findPrice",
    "rate",
    "times",
    "getSalePriceEach",
    "getCapitalGains",
    "purchasePrice",
    "creditWrapper",
    "salePrice",
    "profitEach",
    "minus",
    "transaction",
    "virtual",
    "getTotal",
    "getUsed",
    "getUnrealizedGains",
    "remaining",
    "currentPrice",
    "isClosed",
    "eq",
    "isOpen",
    "shallow",
    "stripFalsyExcept",
    "toISOString",
    "total",
    "used",
    "module",
    "exports"
  ],
  "mappings": "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",
  "file": "lot.js",
  "sourceRoot": "../../src/models",
  "sourcesContent": [
    "const Moment = require('moment');\nconst R = require('ramda');\n\nconst Entry = require('./entry');\nconst utils = require('../utils/models');\nconst { DEBIT } = require('./constants');\nconst { addBigNumbers, BIG_0 } = require('../utils/numbers');\n\nconst getApplied = R.map(R.prop('applied'));\n\nfunction makeCreditObjects(wrappers) {\n  return wrappers.map(wrapper => ({\n    ...wrapper.credit.toObject(true),\n    applied: wrapper.applied.toFixed(8),\n  }));\n}\n\nfunction makeDebitObjects(wrappers) {\n  return wrappers.map(wrapper => ({\n    ...wrapper.debit.toObject(true),\n    applied: wrapper.applied.toFixed(8),\n  }));\n}\n\nclass Lot {\n  /**\n   * Instantiate the lot with its first debit.\n   * @param {Entry} debit\n   */\n  constructor(debit) {\n    this.account = debit.getAccount();\n    this.currency = debit.currency;\n    this.debits = [];\n    this.credits = [];\n    this.utc = debit.getUtc();\n    this.addDebit(debit);\n  }\n\n  /**\n   * Sort function for lots\n   * @param {Lot} a\n   * @param {Lot} b\n   * @param {Integer} -1, 0, 1\n   */\n  static compare(a, b) {\n    const utcA = Moment(a.utc);\n    const utcB = Moment(b.utc);\n    if (utcA.isBefore(utcB)) {\n      return -1;\n    }\n    if (utcB.isBefore(utcA)) {\n      return 1;\n    }\n    if (a.currency < b.currency) {\n      return -1;\n    }\n    if (a.currency > b.currency) {\n      return 1;\n    }\n    return 0;\n  }\n\n  /**\n   * Tests a debit to see if it is a \"lot\" type entry.\n   * @param {Object<String,Currency>} currencies\n   * @param {Entry} debit\n   * @return {Boolean} true if the debit should be in a lot\n   */\n  static isLot(currencies, debit) {\n    if (debit.type !== DEBIT) {\n      return false;\n    }\n    const curr = currencies[debit.currency];\n    if (!curr || curr.isFiat()) {\n      return false;\n    }\n    if (debit.balancing) {\n      // console.log('debit is lot', debit.toObject(true));\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Create lots from a list of debits.\n   * @param {Object<String,Currency>} currencies\n   * @param {Array<Entry>} debits\n   * @return {Array<Lot>} lots\n   */\n  static makeLots(currencies, debits) {\n    const isLot = lot => Lot.isLot(currencies, lot);\n    return debits\n      .filter(isLot)\n      .map(d => new Lot(d));\n  }\n\n  /**\n   * Add a credit to this lot.\n   * @param {Entry} credit\n   * @param {BigNumber} max to apply\n   * @return {BigNumber} amount applied\n   */\n  addCredit(credit, maxQuantity) {\n    const applied = credit.setLot(this, maxQuantity);\n    if (applied.gt(BIG_0)) {\n      this.credits.push({ credit, applied });\n    }\n    return applied;\n  }\n\n  /**\n   * Add a credit to this lot.\n   * @param {Entry} debit\n   * @return {BigNumber} amount remaining to be applied in lot\n   */\n  addDebit(debit) {\n    const applied = debit.setLot(this, debit.quantity);\n    if (applied.gt(BIG_0)) {\n      this.debits.push({ debit, applied });\n    }\n    return this.getRemaining();\n  }\n\n  /**\n   * Get the effective price each on the purchase date.\n   * @param {PriceHistory} pricehistory\n   * @param {String} currency for the price\n   * @param {Array<String>} list of currencies to use as translations\n   * @param {Integer} seconds to search for dates within\n   * @return {BigNumber} price\n   */\n  getPurchasePriceEach(pricehistory, fiat, transCurrencies = ['BTC', 'ETH'], within = null) {\n    const { debit } = this.debits[0];\n    const credit = debit.pair;\n    const eachPrice = credit.quantity.div(debit.quantity);\n    if (credit.currency === fiat) {\n      // easy, purchase price is the \"each\" price of the credit\n      return eachPrice;\n    }\n    const translation = pricehistory.findPrice(\n      this.utc, credit.currency, fiat, transCurrencies, within\n    );\n    // console.log('got translation', translation.toObject());\n    return translation.rate.times(eachPrice);\n  }\n\n  /**\n   * Get the effective price each on the sale date.\n   * @param {Entry} credit\n   * @param {PriceHistory} pricehistory\n   * @param {String} currency for the price\n   * @param {Array<String>} list of currencies to use as translations\n   * @param {Integer} seconds to search for dates within\n   * @return {BigNumber} price\n   */\n  static getSalePriceEach(credit, pricehistory, fiat, transCurrencies = ['BTC', 'ETH'], within = null) {\n    const debit = credit.pair;\n    const eachPrice = debit.quantity.div(credit.quantity);\n    if (debit.currency === fiat) {\n      return eachPrice;\n    }\n    const translation = pricehistory.findPrice(\n      credit.getUtc(), debit.currency, fiat, transCurrencies, within\n    );\n    return translation.rate.times(eachPrice);\n  }\n\n  /**\n   * Calculate capital gains entries from exercised credits.\n   * @param {PriceHistory} pricehistory\n   * @param {String} account path to use for gains entries\n   * @param {String} currency for the price\n   * @param {Array<String>} list of currencies to use as translations\n   * @param {Integer} seconds to search for dates within\n   * @return {Array<Entry>} list of debits representing capital gains\n   */\n  getCapitalGains(pricehistory, account, fiat, transCurrencies = ['BTC', 'ETH'], within = null) {\n    const purchasePrice = this.getPurchasePriceEach(pricehistory, fiat, transCurrencies, within);\n    return this.credits.map((creditWrapper) => {\n      const { credit, applied } = creditWrapper;\n      const salePrice = Lot.getSalePriceEach(\n        credit, pricehistory, fiat, transCurrencies, within\n      );\n      const profitEach = salePrice.minus(purchasePrice);\n      /* console.log(`profitEach (${salePrice.toFixed(2)}\n         -${purchasePrice.toFixed(2)})\n         * ${applied.toFixed()}\n         = ${profitEach.toFixed(2)}`); */\n      return new Entry({\n        transaction: credit.transaction,\n        account,\n        currency: fiat,\n        quantity: profitEach.times(applied),\n        virtual: true,\n        type: DEBIT,\n      });\n    });\n  }\n\n  /**\n   * Get the remaining part of this lot not yet applied to credits.\n   * @return {BigNumber} quantity remaining\n   */\n  getRemaining() {\n    return this.getTotal().minus(this.getUsed());\n  }\n\n  /**\n   * Get the total amount of credits applied to this lot.\n   * @return {BigNumber} quantity applied\n   */\n  getTotal() {\n    return addBigNumbers(getApplied(this.debits));\n  }\n\n  /**\n   * Get unrealized gains for a specified date.\n   * @param {String|Moment} utc search date\n   * @param {PriceHistory} pricehistory\n   * @param {String} account path to use for gains entries\n   * @param {String} currency for the price\n   * @param {Array<String>} list of currencies to use as translations\n   * @param {Integer} seconds to search for dates within\n   * @return {Entry} debits representing unrealized capital gains\n   */\n  getUnrealizedGains(utc, pricehistory, account, currency, transCurrencies = ['BTC', 'ETH'], within = null) {\n    let quantity = BIG_0;\n    const remaining = this.getRemaining();\n    if (remaining.gt(BIG_0)) {\n      const purchasePrice = this.getPurchasePriceEach(\n        pricehistory, currency, transCurrencies, within\n      );\n      const translation = pricehistory.findPrice(\n        utc, this.currency, currency, transCurrencies, within\n      );\n      const currentPrice = translation.rate;\n\n      const profitEach = currentPrice.minus(purchasePrice);\n      quantity = profitEach.times(remaining);\n    }\n\n    const { debit } = this.debits[0];\n    return new Entry({\n      transaction: debit.transaction,\n      account,\n      quantity,\n      currency,\n      virtual: true,\n      type: DEBIT,\n    });\n  }\n\n  /**\n   * Get the total amount of credits applied to this lot.\n   * @return {BigNumber} total applied\n   */\n  getUsed() {\n    return addBigNumbers(getApplied(this.credits));\n  }\n\n  /**\n   * Test whether all debits have been used.\n   * @return {Boolean} true if used up\n   */\n  isClosed() {\n    return this.getRemaining().eq(BIG_0);\n  }\n\n  /**\n   * Test whether all debits have not been used.\n   * @return {Boolean} true if not used up\n   */\n  isOpen() {\n    return this.getRemaining().gt(BIG_0);\n  }\n\n  /**\n   * Get a representation of this object useful for logging or converting to yaml\n   * @param {Boolean} shallow - reduce output of child objects if true\n   * @return {Object<String, *>}\n   */\n  toObject(shallow) {\n    return utils.stripFalsyExcept({\n      account: this.account,\n      currency: this.currency,\n      credits: shallow ? null : makeCreditObjects(this.credits),\n      debits: shallow ? null : makeDebitObjects(this.debits),\n      utc: this.utc.toISOString(),\n      total: this.getTotal().toFixed(8),\n      used: this.getUsed().toFixed(8),\n      remaining: this.getRemaining().toFixed(8),\n    }, ['account']);\n  }\n}\n\nmodule.exports = Lot;\n"
  ]
}
