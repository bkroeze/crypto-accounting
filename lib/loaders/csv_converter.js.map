{
  "version": 3,
  "sources": [
    "csv_converter.js"
  ],
  "names": [
    "R",
    "require",
    "parse",
    "Moment",
    "safeDump",
    "CLEARED",
    "utils",
    "getFS",
    "onlyConfirmed",
    "propEq",
    "findAmount",
    "find",
    "startsWith",
    "parseWalletCSV",
    "data",
    "currency",
    "debit",
    "credit",
    "parsed",
    "columns",
    "amountField",
    "toObject",
    "row",
    "keysIn",
    "stripFalsyExcept",
    "id",
    "ID",
    "account",
    "utc",
    "Date",
    "status",
    "party",
    "Label",
    "note",
    "Type",
    "address",
    "Address",
    "entries",
    "filter",
    "map",
    "keys",
    "toYaml",
    "work",
    "forEach",
    "key",
    "has",
    "prefix",
    "length",
    "push",
    "entry",
    "console",
    "log",
    "join",
    "transactionsToYaml",
    "walletCsvToYamlSync",
    "filename",
    "readFileSync",
    "byDate",
    "a",
    "b",
    "dateA",
    "date",
    "dateB",
    "isBefore",
    "mergeTransactionLists",
    "ids",
    "tx",
    "clone",
    "sort",
    "module",
    "exports"
  ],
  "mappings": "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",
  "file": "csv_converter.js",
  "sourceRoot": "../../src/loaders",
  "sourcesContent": [
    "/* eslint no-unused-vars: off */\nconst R = require('ramda');\nconst parse = require('csv-parse/lib/sync');\nconst Moment = require('moment');\nconst { safeDump } = require('js-yaml');\n\nconst { CLEARED } = require('../models/constants');\n\nconst utils = require('../utils/models');\nconst { getFS } = require('./common');\n\nconst onlyConfirmed = R.propEq('Confirmed', 'true');\nconst findAmount = R.find(R.startsWith('Amount'));\n\nfunction parseWalletCSV(data, currency, debit, credit) {\n  const parsed = parse(data, { columns: true });\n  let amountField;\n  const toObject = (row) => {\n    if (!amountField) {\n      amountField = findAmount(R.keysIn(row));\n    }\n    return utils.stripFalsyExcept({\n      id: row.ID,\n      account: debit,\n      utc: row.Date,\n      status: CLEARED,\n      party: row.Label,\n      note: row.Type,\n      address: row.Address,\n      entries: [`${row[amountField]} ${credit}`],\n    });\n  };\n\n  return parsed\n    .filter(onlyConfirmed)\n    .map(toObject);\n}\n\nconst keys = ['id', 'account', 'utc', 'status', 'party', 'note', 'address'];\n\nfunction toYaml(data) {\n  const work = [];\n  keys.forEach((key) => {\n    if (R.has(key, data)) {\n      const prefix = work.length === 0 ? '-' : ' ';\n      work.push(`${prefix} ${key}: ${data[key]}`);\n    }\n  });\n  if (data.entries && data.entries.length > 0) {\n    work.push('  entries:');\n    data.entries.forEach((entry) => {\n      work.push(`    - ${entry}`);\n    });\n  } else {\n    console.log('no entries', data);\n  }\n  work.push('');\n  return work.join('\\n');\n}\n\nfunction transactionsToYaml(data) {\n  return data.map(toYaml).join('\\n');\n}\n\nfunction walletCsvToYamlSync(filename, currency, debit, credit) {\n  const data = parseWalletCSV(getFS().readFileSync(filename), currency, debit, credit);\n  return transactionsToYaml(data);\n}\n\nfunction byDate(a, b) {\n  const dateA = Moment(a.date);\n  const dateB = Moment(b.date);\n  if (dateA.isBefore(dateB)) {\n    return -1;\n  }\n  if (dateB.isBefore(dateA)) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction mergeTransactionLists(a, b) {\n  const ids = {};\n  a.forEach((tx) => {\n    if (tx.id) {\n      ids[tx.id] = true;\n    }\n  });\n  const work = R.clone(a);\n  b.forEach((tx) => {\n    if (!ids[tx.id]) {\n      work.push(tx);\n    }\n  });\n  work.sort(byDate);\n  return work;\n}\n\nmodule.exports = {\n  parseWalletCSV,\n  transactionsToYaml,\n  walletCsvToYamlSync,\n  byDate,\n  mergeTransactionLists,\n};\n\n"
  ]
}
