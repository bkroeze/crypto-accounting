{
  "version": 3,
  "sources": [
    "csv_converter.js"
  ],
  "names": [
    "R",
    "require",
    "RA",
    "parse",
    "Moment",
    "safeDump",
    "CLEARED",
    "utils",
    "getFS",
    "onlyConfirmed",
    "propEq",
    "findAmount",
    "find",
    "startsWith",
    "getIds",
    "map",
    "prop",
    "parseWalletCSV",
    "data",
    "currency",
    "debit",
    "credit",
    "parsed",
    "columns",
    "amountField",
    "toObject",
    "row",
    "ix",
    "keysIn",
    "stripFalsyExcept",
    "id",
    "ID",
    "date",
    "account",
    "utc",
    "Date",
    "status",
    "party",
    "Label",
    "note",
    "Type",
    "address",
    "Address",
    "entries",
    "filter",
    "keys",
    "toYaml",
    "byDay",
    "work",
    "forEach",
    "key",
    "has",
    "prefix",
    "length",
    "pushed",
    "val",
    "isObj",
    "push",
    "Object",
    "acctKey",
    "format",
    "toISOString",
    "entry",
    "console",
    "log",
    "join",
    "transactionsToYaml",
    "x",
    "walletCsvToYamlSync",
    "filename",
    "readFileSync",
    "byDate",
    "a",
    "b",
    "dateA",
    "dateB",
    "isBefore",
    "mergeTransactionLists",
    "ids",
    "Set",
    "tx",
    "sort",
    "module",
    "exports",
    "rowToYaml"
  ],
  "mappings": "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",
  "file": "csv_converter.js",
  "sourceRoot": "../../src/loaders",
  "sourcesContent": [
    "/* eslint no-unused-vars: off */\nconst R = require('ramda');\nconst RA = require('ramda-adjunct');\nconst parse = require('csv-parse/lib/sync');\nconst Moment = require('moment');\nconst { safeDump } = require('js-yaml');\n\nconst { CLEARED } = require('../models/constants');\n\nconst utils = require('../utils/models');\nconst { getFS } = require('./common');\n\nconst onlyConfirmed = R.propEq('Confirmed', 'true');\nconst findAmount = R.find(R.startsWith('Amount'));\nconst getIds = R.map(R.prop('id'));\n\n/**\n * Parse a CSV string into transaction objects.\n * @param {String} data\n * @param {String} currency (ex: BTC)\n * @param {String} debit account\n * @param {String} credit account\n * @return {Array<Object>} List of transaction objects\n */\nfunction parseWalletCSV(data, currency, debit, credit) {\n  const parsed = parse(data, { columns: true });\n  let amountField;\n  const toObject = (row, ix) => {\n    if (!amountField) {\n      amountField = findAmount(R.keysIn(row));\n    }\n    return utils.stripFalsyExcept({\n      id: row.ID ? row.ID : `${row.date}-${ix}`,\n      account: debit,\n      utc: Moment(row.Date),\n      status: CLEARED,\n      party: row.Label,\n      note: row.Type,\n      address: row.Address,\n      entries: [`${row[amountField]} ${credit}`],\n    });\n  };\n\n  return parsed\n    .filter(onlyConfirmed)\n    .map(toObject);\n}\n\nconst keys = ['id', 'account', 'utc', 'status', 'party', 'note', 'address'];\n\n/**\n * Convert a transaction object to its yaml representation\n * @param {Object} data\n * @param {Boolean} byDay if bucketed\n * @return {String} YAML representation\n */\nfunction toYaml(data, byDay) {\n  const work = [];\n  keys.forEach((key) => {\n    if (R.has(key, data) && data[key]) {\n      const prefix = work.length === 0 ? '-' : ' ';\n      let pushed = false;\n      let val = data[key];\n      if (key === 'account' && RA.isObj(val)) {\n        if (val.credit === val.debit) {\n          val = val.credit;\n        } else {\n          work.push(`${prefix} account:`)\n          Object.keys(val).forEach((acctKey) => {\n            work.push(`    ${acctKey}: ${val[acctKey]}`);\n          });\n          pushed = true;\n        }\n      } else if (key === 'utc') {\n        val = byDay ? val.format('YYYY-MM-DD') : val.toISOString();\n      }\n      if (!pushed) {\n        work.push(`${prefix} ${key}: ${val}`);\n      }\n    }\n  });\n  if (data.entries && data.entries.length > 0) {\n    work.push('  entries:');\n    data.entries.forEach((entry) => {\n      work.push(`    - ${entry}`);\n    });\n  } else {\n    console.log('no entries', data);\n  }\n  work.push('');\n  return work.join('\\n');\n}\n\n/**\n * Convert a list of yaml transactions to string.\n * @param {Array<String>} data\n * @return {String} Joined output\n */\nfunction transactionsToYaml(data, byDay) {\n  return data.map(x => toYaml(x, byDay)).join('\\n');\n}\n\n/**\n * Load CSV from a file and convert to yaml.\n * @param {String} filename\n * @param {String} currency (ex: BTC)\n * @param {String} debit account\n * @param {String} credit account\n * @return {String} YAML representation\n */\nfunction walletCsvToYamlSync(filename, currency, debit, credit) {\n  const data = parseWalletCSV(getFS().readFileSync(filename), currency, debit, credit);\n  return transactionsToYaml(data, false);\n}\n\n/**\n * Comparison sort function for two transactions by their date\n * @param {String} date a\n * @param {String} date b\n * @return {Integer} 0 if equal, -1 if a is before b, 1 if a is after b\n */\nfunction byDate(a, b) {\n  const dateA = Moment(a.date);\n  const dateB = Moment(b.date);\n  if (dateA.isBefore(dateB)) {\n    return -1;\n  }\n  if (dateB.isBefore(dateA)) {\n    return 1;\n  }\n  return 0;\n}\n\n/**\n * Merges two transaction lists, repecting IDs.\n * @param {Array<Object>} Transaction list a\n * @param {Array<Object>} Transaction list b\n * @param {Array<Object>} Merged list\n */\nfunction mergeTransactionLists(a, b) {\n  const ids = new Set(getIds(a));\n  const work = a.map(a => a);\n  b.forEach((tx) => {\n    if (!ids.has(tx.id)) {\n      work.push(tx);\n    }\n  });\n  work.sort(byDate);\n  return work;\n}\n\nmodule.exports = {\n  parseWalletCSV,\n  transactionsToYaml,\n  walletCsvToYamlSync,\n  byDate,\n  mergeTransactionLists,\n  rowToYaml: toYaml,\n};\n\n"
  ]
}
