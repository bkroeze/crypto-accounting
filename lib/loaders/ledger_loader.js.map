{
  "version": 3,
  "sources": [
    "ledger_loader.js"
  ],
  "names": [
    "R",
    "require",
    "contained",
    "path",
    "getFS",
    "splitAndTrim",
    "Transaction",
    "isRelativePath",
    "trimRight",
    "val",
    "isCommentChar",
    "isLeadingCommentLine",
    "slice",
    "stripLeadingCommentLines",
    "reject",
    "isCommentLine",
    "trimLeft",
    "isNumeric",
    "isNewTransactionLine",
    "isAccountKey",
    "addEqualsConnector",
    "insert",
    "shortcutFromLedgerLine",
    "line",
    "parts",
    "account",
    "shift",
    "push",
    "length",
    "join",
    "replace",
    "convertLedgerTransaction",
    "lines",
    "header",
    "utc",
    "split",
    "status",
    "party",
    "extra",
    "address",
    "notes",
    "props",
    "entryLines",
    "forEach",
    "linetext",
    "indexOf",
    "key",
    "toLowerCase",
    "lastLine",
    "pop",
    "entries",
    "map",
    "note",
    "loadLedgerTransactions",
    "raw",
    "linesets",
    "accum",
    "clean",
    "isEmpty",
    "loadTransactionsFromFilenameSync",
    "fname",
    "directory",
    "link",
    "normalize",
    "readFileSync",
    "module",
    "exports"
  ],
  "mappings": "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",
  "file": "ledger_loader.js",
  "sourceRoot": "../../src/loaders",
  "sourcesContent": [
    "/* eslint no-unused-vars: off */\n\nconst R = require('ramda');\nconst { contained } = require('ramda-adjunct');\nconst path = require('path');\n\nconst { getFS } = require('./common');\nconst { splitAndTrim } = require('../utils/models');\nconst Transaction = require('../models/transaction');\nconst { isRelativePath } = require('../utils/files');\n\nconst trimRight = val => val.trimRight;\nconst isCommentChar = contained(';#%!*');\nconst isLeadingCommentLine = val => isCommentChar(val.slice(0, 1));\nconst stripLeadingCommentLines = R.reject(isLeadingCommentLine);\nconst isCommentLine = val => isCommentChar(val.trimLeft().slice(0, 1));\nconst isNumeric = contained('0123456789');\nconst isNewTransactionLine = val => isNumeric(val.slice(0, 1));\nconst isAccountKey = contained(['id', 'account', 'note', 'status', 'address', 'party']);\nconst addEqualsConnector = R.insert(0, '=');\n\nfunction shortcutFromLedgerLine(line) {\n  let parts = splitAndTrim(line);\n  const account = parts.shift();\n  parts = R.reject(isLeadingCommentLine, parts);\n  parts.push(account);\n  if (parts.length <= 3) {\n    // in Ledger format, if it is a single-posting, then it is a debit\n    // so use the leading-equals shortcut for that.\n    parts = addEqualsConnector(parts);\n  }\n  return parts.join(' ').replace(/@@/g, '=');\n}\n\nfunction convertLedgerTransaction(lines) {\n  const header = splitAndTrim(lines.shift());\n  const utc = header.shift().split('/').join('-');\n  let status = '';\n  if (header[0].length === 1 && header.length > 1) {\n    status = header.shift();\n  }\n  const party = header.join(' ');\n  const extra = {};\n  let account = '';\n  const address = '';\n  const notes = [];\n  const props = {};\n  const entryLines = [];\n  // process comment lines first, so that all we will have left are entries\n  lines.forEach((line) => {\n    if (!isLeadingCommentLine(line)) {\n      entryLines.push(line);\n    } else {\n      const linetext = line.slice(1);\n      if (line.indexOf(':') === -1) {\n        notes.push(linetext);\n      } else {\n        const parts = linetext.split(':');\n        const key = parts[0].toLowerCase();\n        const val = parts.slice(1).join(':');\n        if (key === 'notes') {\n          notes.push(val);\n        } else if (isAccountKey(key)) {\n          props[key] = val;\n        } else {\n          extra[key] = val;\n        }\n      }\n    }\n  });\n  // check to see if we have a default account\n  if (entryLines.length > 0) {\n    const lastLine = entryLines[entryLines.length - 1];\n    if (lastLine.indexOf(' ') === -1) {\n      // yes, this is an \"elided\" Ledger entry\n      account = entryLines.pop();\n    }\n  }\n\n  const entries = entryLines.map(shortcutFromLedgerLine);\n\n  return new Transaction({\n    ...props,\n    utc,\n    status,\n    party,\n    account,\n    address,\n    note: notes.join('\\n'),\n    extra,\n    entries,\n  });\n}\n\nfunction loadLedgerTransactions(raw) {\n  const lines = raw.replace(/\\r/g, '').split('\\n');\n  const linesets = [];\n  let accum = [];\n\n  stripLeadingCommentLines(lines).forEach((line) => {\n    const clean = line.trimRight();\n    if (!R.isEmpty(clean)) {\n      if (isNewTransactionLine(line) && accum.length > 0) {\n        linesets.push(accum);\n        accum = [line];\n      } else {\n        accum.push(clean.trimLeft());\n      }\n    }\n  });\n  if (accum.length > 0) {\n    linesets.push(accum);\n  }\n\n  // now we have an array of \"linesets\" which each are a transaction, hopefully.\n  return linesets.map(convertLedgerTransaction);\n}\n\nfunction loadTransactionsFromFilenameSync(fname, directory) {\n  let link = fname;\n  if (directory && isRelativePath(fname)) {\n    link = path.normalize(`${directory}/${fname}`);\n  }\n  return loadLedgerTransactions(getFS().readFileSync(link, 'utf-8'));\n}\n\nmodule.exports = {\n  shortcutFromLedgerLine,\n  loadTransactionsFromFilenameSync,\n  loadLedgerTransactions,\n  convertLedgerTransaction,\n};\n"
  ]
}
