{
  "version": 3,
  "sources": [
    "ledger_loader.js"
  ],
  "names": [
    "R",
    "require",
    "contained",
    "path",
    "getFS",
    "splitAndTrim",
    "isTime",
    "isConnector",
    "Transaction",
    "isRelativePath",
    "LEDGER_COMMENTS",
    "LEDGER_LINE_COMMENT",
    "Entry",
    "trimRight",
    "val",
    "isCommentChar",
    "isLeadingCommentLine",
    "slice",
    "stripLeadingCommentLines",
    "reject",
    "isCommentLine",
    "trimLeft",
    "isNumeric",
    "isNewTransactionLine",
    "isAccountKey",
    "lineCommentSpaces",
    "isCommentToken",
    "startsWith",
    "lastTokenIsComment",
    "last",
    "findConnector",
    "findIndex",
    "isNegative",
    "shortcutFromLedgerLine",
    "line",
    "clean",
    "replace",
    "parts",
    "tokenizeShortcut",
    "comment",
    "pop",
    "account",
    "shift",
    "pair",
    "type",
    "length",
    "connectorIx",
    "insert",
    "push",
    "shortcut",
    "join",
    "ledgerTransactionToObject",
    "lines",
    "header",
    "utc",
    "split",
    "status",
    "party",
    "extra",
    "notes",
    "props",
    "entryLines",
    "forEach",
    "linetext",
    "indexOf",
    "key",
    "toLowerCase",
    "trim",
    "lastLine",
    "entries",
    "credits",
    "debits",
    "trades",
    "map",
    "entry",
    "note",
    "convertLedgerTransaction",
    "splitLedgerTransactions",
    "raw",
    "linesets",
    "accum",
    "isEmpty",
    "loadLedgerTransactions",
    "loadObjectsFromString",
    "loadTransactionsFromFilenameSync",
    "fname",
    "directory",
    "link",
    "normalize",
    "readFileSync",
    "module",
    "exports"
  ],
  "mappings": "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",
  "file": "ledger_loader.js",
  "sourceRoot": "../../src/loaders",
  "sourcesContent": [
    "/* eslint no-unused-vars: off */\n\nconst R = require('ramda');\nconst { contained } = require('ramda-adjunct');\nconst path = require('path');\n\nconst { getFS } = require('./common');\nconst { splitAndTrim, isTime, isConnector } = require('../utils/models');\nconst Transaction = require('../models/transaction');\nconst { isRelativePath } = require('../utils/files');\nconst { LEDGER_COMMENTS, LEDGER_LINE_COMMENT } = require('../models/constants')\nconst Entry = require('../models/entry');\n\nconst trimRight = val => val.trimRight;\nconst isCommentChar = contained(LEDGER_COMMENTS);\nconst isLeadingCommentLine = val => isCommentChar(val.slice(0, 1));\nconst stripLeadingCommentLines = R.reject(isLeadingCommentLine);\nconst isCommentLine = val => isCommentChar(val.trimLeft().slice(0, 1));\nconst isNumeric = contained('0123456789');\nconst isNewTransactionLine = val => isNumeric(val.slice(0, 1));\nconst isAccountKey = contained(['id', 'account', 'note', 'status', 'address', 'party']);\nconst lineCommentSpaces = /\\; */;\nconst isCommentToken = R.startsWith(LEDGER_LINE_COMMENT);\nconst lastTokenIsComment = (val) => isCommentToken(R.last(val));\nconst findConnector = R.findIndex(isConnector);\nconst isNegative = R.startsWith('-');\n\nfunction shortcutFromLedgerLine(line) {\n  const clean = line\n        .replace(lineCommentSpaces, ';')\n        .replace(/@@/g, '=');\n  let parts = Entry.tokenizeShortcut(clean);\n  const comment = lastTokenIsComment(parts) ? parts.pop() : null;\n  const account = parts.shift();\n  const pair = {};\n  let type = 'trades';\n\n  if (parts.length <= 3) {\n    // in Ledger format, a single posting could be a credit\n    // if it is negative\n    if (isNegative(parts[0])) {\n      type = 'credits';\n      parts[0] = parts[0].slice(1);  // strip the negative\n    } else {\n      type = 'debits';\n    }\n  }\n\n  const connectorIx = findConnector(parts);\n  if (connectorIx > -1) {\n    parts = R.insert(connectorIx, account, parts);\n  } else {\n    parts.push(account);\n  }\n\n  if (comment) {\n    parts.push(comment);\n  }\n  return { type, shortcut: parts.join(' ') };\n}\n\nfunction ledgerTransactionToObject(lines) {\n  const header = splitAndTrim(lines.shift());\n  // get the utc, replacing / with -.\n  let utc = header.shift().split('/').join('-');\n  let status = '';\n\n  // has time?\n  if (header[0].length > 1 && isTime(header[0])) {\n    utc = `${utc} ${header.shift()}`;\n  }\n  if (header[0].length === 1 && header.length > 1) {\n    status = header.shift();\n    if (status === '*') {\n      status = 'cleared';\n    }\n  }\n  const party = header.join(' ');\n  const extra = {};\n  const notes = [];\n  const props = {};\n  const entryLines = [];\n  // process comment lines first, so that all we will have left are entries\n  lines.forEach((line) => {\n    if (!isLeadingCommentLine(line)) {\n      entryLines.push(line);\n    } else {\n      const linetext = line.slice(1);\n      if (line.indexOf(':') === -1) {\n        notes.push(linetext);\n      } else {\n        const parts = linetext.split(':');\n        const key = parts[0].toLowerCase().trim();\n        const val = parts.slice(1).join(':').trim();\n        if (key === 'notes') {\n          notes.push(val);\n        } else if (isAccountKey(key)) {\n          props[key] = val;\n        } else {\n          extra[key] = val;\n        }\n      }\n    }\n  });\n  // check to see if we have a default account\n  if (entryLines.length > 0) {\n    const lastLine = entryLines[entryLines.length - 1];\n    if (lastLine.indexOf(' ') === -1) {\n      // yes, this is an \"elided\" Ledger entry\n      props.account = entryLines.pop();\n    }\n  }\n\n  const entries = {\n    credits: [],\n    debits: [],\n    trades: [],\n  };\n\n  entryLines.map(shortcutFromLedgerLine)\n    .forEach((entry) => {\n      entries[entry.type].push(entry.shortcut);\n    });\n\n  return {\n    ...props,\n    utc,\n    status,\n    party,\n    note: notes.join('\\n'),\n    extra,\n    ...entries,\n  };\n}\n\nfunction convertLedgerTransaction(lines) {\n  return new Transaction(ledgerTransactionToObject(lines));\n}\n\nfunction splitLedgerTransactions(raw) {\n  const lines = raw.replace(/\\r/g, '').split('\\n');\n  const linesets = [];\n  let accum = [];\n\n  stripLeadingCommentLines(lines).forEach((line) => {\n    const clean = line.trimRight();\n    if (!R.isEmpty(clean)) {\n      if (isNewTransactionLine(line) && accum.length > 0) {\n        linesets.push(accum);\n        accum = [line];\n      } else {\n        accum.push(clean.trimLeft());\n      }\n    }\n  });\n  if (accum.length > 0) {\n    linesets.push(accum);\n  }\n\n  // now we have an array of \"linesets\" which each are a transaction, hopefully.\n  return linesets;\n}\n\nfunction loadLedgerTransactions(raw) {\n  return splitLedgerTransactions(raw)\n    .map(convertLedgerTransaction);\n}\n\nfunction loadObjectsFromString(raw) {\n  return splitLedgerTransactions(raw)\n    .map(ledgerTransactionToObject);\n}\n\nfunction loadTransactionsFromFilenameSync(fname, directory) {\n  let link = fname;\n  if (directory && isRelativePath(fname)) {\n    link = path.normalize(`${directory}/${fname}`);\n  }\n  return loadLedgerTransactions(getFS().readFileSync(link, 'utf-8'));\n}\n\nmodule.exports = {\n  shortcutFromLedgerLine,\n  loadObjectsFromString,\n  loadTransactionsFromFilenameSync,\n  loadLedgerTransactions,\n  convertLedgerTransaction,\n};\n"
  ]
}
