{
  "version": 3,
  "sources": [
    "ledger_loader.js"
  ],
  "names": [
    "R",
    "require",
    "Result",
    "contained",
    "path",
    "log",
    "get",
    "getFS",
    "splitAndTrim",
    "isTime",
    "isConnector",
    "Transaction",
    "isRelativePath",
    "LEDGER_COMMENTS",
    "LEDGER_LINE_COMMENT",
    "Entry",
    "Parser",
    "trimRight",
    "val",
    "isCommentChar",
    "isLeadingCommentLine",
    "slice",
    "stripLeadingCommentLines",
    "reject",
    "isCommentLine",
    "trimLeft",
    "isNumeric",
    "isNewTransactionLine",
    "isAccountKey",
    "lineCommentSpaces",
    "isCommentToken",
    "startsWith",
    "lastTokenIsComment",
    "last",
    "findConnector",
    "findIndex",
    "isNegative",
    "parser",
    "shortcutFromLedgerLine",
    "line",
    "clean",
    "replace",
    "tokenizeShortcut",
    "chain",
    "tokens",
    "comment",
    "parts",
    "clone",
    "account",
    "shift",
    "trim",
    "pair",
    "type",
    "length",
    "connectorIx",
    "insert",
    "push",
    "shortcut",
    "join",
    "Ok",
    "ledgerTransactionToObject",
    "lines",
    "header",
    "utc",
    "split",
    "status",
    "party",
    "extra",
    "notes",
    "props",
    "entryLines",
    "forEach",
    "rawLine",
    "linetext",
    "indexOf",
    "key",
    "toLowerCase",
    "lastLine",
    "pop",
    "entries",
    "credits",
    "debits",
    "trades",
    "errors",
    "addEntry",
    "entry",
    "merge",
    "addError",
    "error",
    "matchWith",
    "Error",
    "note",
    "convertLedgerTransaction",
    "splitLedgerTransactions",
    "raw",
    "linesets",
    "accum",
    "isEmpty",
    "loadLedgerTransactions",
    "map",
    "loadObjectsFromString",
    "loadTransactionsFromFilenameSync",
    "fname",
    "directory",
    "link",
    "normalize",
    "readFileSync",
    "module",
    "exports"
  ],
  "mappings": "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",
  "file": "ledger_loader.js",
  "sourceRoot": "../../src/loaders",
  "sourcesContent": [
    "/* eslint no-unused-vars: off */\n\nconst R = require('ramda');\nconst Result = require('folktale/result');\nconst { contained } = require('ramda-adjunct');\nconst path = require('path');\nconst log = require('js-logger').get('ledger_loader');\n\nconst { getFS } = require('./common');\nconst { splitAndTrim, isTime, isConnector } = require('../utils/models');\nconst Transaction = require('../models/transaction');\nconst { isRelativePath } = require('../utils/files');\nconst { LEDGER_COMMENTS, LEDGER_LINE_COMMENT } = require('../models/constants');\nconst Entry = require('../models/entry');\nconst Parser = require('../utils/parser');\n\nconst trimRight = val => val.trimRight;\nconst isCommentChar = contained(LEDGER_COMMENTS);\nconst isLeadingCommentLine = val => isCommentChar(val.slice(0, 1));\nconst stripLeadingCommentLines = R.reject(isLeadingCommentLine);\nconst isCommentLine = val => isCommentChar(val.trimLeft().slice(0, 1));\nconst isNumeric = contained('0123456789');\nconst isNewTransactionLine = val => isNumeric(val.slice(0, 1));\nconst isAccountKey = contained(['id', 'account', 'note', 'status', 'address', 'party']);\nconst lineCommentSpaces = /\\; */;\nconst isCommentToken = R.startsWith(LEDGER_LINE_COMMENT);\nconst lastTokenIsComment = (val) => isCommentToken(R.last(val));\nconst findConnector = R.findIndex(isConnector);\nconst isNegative = R.startsWith('-');\nconst parser = new Parser();\n\nfunction shortcutFromLedgerLine(line) {\n  const clean = line\n        .replace(lineCommentSpaces, ';')\n        .replace(/@@/g, '=');\n  return parser.tokenizeShortcut(clean)\n    .chain(({ tokens, comment }) => {\n      let parts = R.clone(tokens);\n      const account = parts.shift().trim();\n      const pair = {};\n      let type = 'trades';\n\n      if (parts.length <= 3) {\n        // in Ledger format, a single posting could be a credit\n        // if it is negative\n        if (isNegative(parts[0])) {\n          type = 'credits';\n          parts[0] = parts[0].slice(1); // strip the negative\n        } else {\n          type = 'debits';\n        }\n      }\n\n      const connectorIx = findConnector(parts);\n      if (connectorIx > -1) {\n        parts = R.insert(connectorIx, account, parts);\n      } else {\n        parts.push(account);\n      }\n      const shortcut = comment ? `${parts.join(' ')} ;${comment}` : parts.join(' ');\n      return Result.Ok({ type, shortcut });\n    });\n}\n\nfunction ledgerTransactionToObject(lines) {\n  const header = splitAndTrim(lines.shift());\n  // get the utc, replacing / with -.\n  let utc = header.shift().split('/').join('-');\n  let status = '';\n\n  // has time?\n  if (header[0].length > 1 && isTime(header[0])) {\n    utc = `${utc} ${header.shift()}`;\n  }\n  if (header[0].length === 1 && header.length > 1) {\n    status = header.shift();\n    if (status === '*') {\n      status = 'cleared';\n    }\n  }\n  const party = header.join(' ');\n  const extra = {};\n  const notes = [];\n  const props = {};\n  const entryLines = [];\n  // process comment lines first, so that all we will have left are entries\n  lines.forEach((rawLine) => {\n    const line = rawLine.trim();\n    if (line.length > 0) {\n      if (!isLeadingCommentLine(line)) {\n        entryLines.push(line);\n      } else {\n        const linetext = line.slice(1);\n        if (line.indexOf(':') === -1) {\n          notes.push(linetext);\n        } else {\n          const parts = linetext.split(':');\n          const key = parts[0].toLowerCase().trim();\n          const val = parts.slice(1).join(':').trim();\n          if (key === 'notes') {\n            notes.push(val);\n          } else if (isAccountKey(key)) {\n            props[key] = val;\n          } else {\n            extra[key] = val;\n          }\n        }\n      }\n    }\n  });\n  // check to see if we have a default account\n  if (entryLines.length > 0) {\n    const lastLine = entryLines[entryLines.length - 1];\n    if (lastLine.trim().indexOf(' ') === -1) {\n      // yes, this is an \"elided\" Ledger entry\n      props.account = entryLines.pop();\n    }\n  }\n\n  const entries = {\n    credits: [],\n    debits: [],\n    trades: [],\n  };\n\n  const errors = [];\n  const addEntry = (entry) => {\n    const val = entry.merge();\n    entries[val.type].push(val.shortcut);\n  };\n\n  const addError = (entry) => {\n    const val = entry.merge();\n    log.error('Err', val);\n    errors.push(val);\n  };\n\n  entryLines.forEach((line) => {\n    shortcutFromLedgerLine(line)\n      .matchWith({\n        Ok: addEntry,\n        Error: addError,\n      });\n  });\n\n  return {\n    ...props,\n    utc,\n    status,\n    party,\n    note: notes.join('\\n'),\n    extra,\n    errors,\n    ...entries,\n  };\n}\n\nfunction convertLedgerTransaction(lines) {\n  return new Transaction(ledgerTransactionToObject(lines));\n}\n\nfunction splitLedgerTransactions(raw) {\n  const lines = raw.replace(/\\r/g, '').split('\\n');\n  const linesets = [];\n  let accum = [];\n\n  stripLeadingCommentLines(lines).forEach((line) => {\n    const clean = line.trimRight();\n    if (!R.isEmpty(clean)) {\n      if (isNewTransactionLine(line) && accum.length > 0) {\n        linesets.push(accum);\n        accum = [line];\n      } else {\n        accum.push(clean.trimLeft());\n      }\n    }\n  });\n  if (accum.length > 0) {\n    linesets.push(accum);\n  }\n\n  // now we have an array of \"linesets\" which each are a transaction, hopefully.\n  return linesets;\n}\n\nfunction loadLedgerTransactions(raw) {\n  return splitLedgerTransactions(raw)\n    .map(convertLedgerTransaction);\n}\n\nfunction loadObjectsFromString(raw) {\n  return splitLedgerTransactions(raw)\n    .map(ledgerTransactionToObject);\n}\n\nfunction loadTransactionsFromFilenameSync(fname, directory) {\n  let link = fname;\n  if (directory && isRelativePath(fname)) {\n    link = path.normalize(`${directory}/${fname}`);\n  }\n  return loadLedgerTransactions(getFS().readFileSync(link, 'utf-8'));\n}\n\nmodule.exports = {\n  shortcutFromLedgerLine,\n  ledgerTransactionToObject,\n  loadObjectsFromString,\n  loadTransactionsFromFilenameSync,\n  loadLedgerTransactions,\n  convertLedgerTransaction,\n};\n"
  ]
}
