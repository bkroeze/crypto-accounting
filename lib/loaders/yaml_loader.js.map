{
  "version": 3,
  "sources": [
    "yaml_loader.js"
  ],
  "names": [
    "R",
    "require",
    "path",
    "safeLoad",
    "isRelativePath",
    "loadLedgerTransactions",
    "loadTransactionsFromFilenameSync",
    "getFS",
    "hasRef",
    "has",
    "isObjectByKey",
    "obj",
    "key",
    "is",
    "Object",
    "prop",
    "objectTester",
    "curry",
    "findRefs",
    "work",
    "refPath",
    "refs",
    "push",
    "link",
    "$ref",
    "tester",
    "filter",
    "keysIn",
    "forEach",
    "concat",
    "loadYamlFromFilenameSync",
    "fname",
    "directory",
    "normalize",
    "loadRefs",
    "readFileSync",
    "flexibleLoadByExtSync",
    "ext",
    "extname",
    "toLowerCase",
    "loadRef",
    "reference",
    "child",
    "String",
    "refList",
    "map",
    "l",
    "Array",
    "flatten",
    "mergeAll",
    "merged",
    "dissocPath",
    "assocPath",
    "ref",
    "module",
    "exports"
  ],
  "mappings": "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",
  "file": "yaml_loader.js",
  "sourceRoot": "../../src/loaders",
  "sourcesContent": [
    "/* eslint no-use-before-define: off */\nconst R = require('ramda');\nconst path = require('path');\nconst { safeLoad } = require('js-yaml');\nconst { isRelativePath } = require('../utils/files');\nconst loadLedgerTransactions = require('./ledger_loader').loadTransactionsFromFilenameSync;\nconst { getFS } = require('./common');\n\nconst hasRef = R.has('$ref');\nconst isObjectByKey = (obj, key) => R.is(Object, R.prop(key, obj));\nconst objectTester = R.curry(isObjectByKey);\n\n/**\n * Finds the paths for every instance of \"$ref\" as a key\n * @param {Object} work object to search\n * @param {Array<String>} path existing path to extend\n * @return {Array<Object<Array<String>, String>>} An array of paths, given as\n *   {path: array, link: string}\n */\nfunction findRefs(work, refPath = []) {\n  let refs = [];\n\n  if (hasRef(work)) {\n    refs.push({ path: refPath, link: work.$ref });\n  }\n  const tester = objectTester(work);\n  R.filter(tester, R.keysIn(work)).forEach((key) => {\n    // the key is a key for an object in work\n    // so recurse, with the current refPath\n    // adding to refs each time.\n    refs = R.concat(refs, findRefs(work[key], R.concat(refPath, [key])));\n  });\n  return refs;\n}\n\nfunction loadYamlFromFilenameSync(fname, directory) {\n  let link = fname;\n  if (directory && isRelativePath(fname)) {\n    link = path.normalize(`${directory}/${fname}`);\n  }\n  return loadRefs(safeLoad(getFS().readFileSync(link, 'utf-8')), directory);\n}\n\nfunction flexibleLoadByExtSync(fname, directory) {\n  const ext = path.extname(fname).toLowerCase();\n  if (ext === '.dat' || ext === '.ledger' || ext === '.ldr') {\n    return loadLedgerTransactions(fname, directory);\n  }\n  return loadYamlFromFilenameSync(fname, directory);\n}\n\nfunction loadRef(work, reference, directory) {\n  const { link } = reference;\n  let child;\n  if (R.is(String, link)) {\n    child = flexibleLoadByExtSync(link, directory);\n  } else {\n    const refList = link.map(l => flexibleLoadByExtSync(l, directory));\n    if (R.is(Array, refList[0])) {\n      // flatten array\n      child = R.flatten(refList);\n    } else {\n      // merge the results into one object\n      child = R.mergeAll(refList);\n    }\n  }\n  const merged = R.dissocPath(R.concat(reference.path, ['$ref']), work);\n  return R.assocPath(reference.path, child, merged);\n}\n\nfunction loadRefs(work, directory) {\n  let merged = work;\n  findRefs(work).forEach((ref) => {\n    // and merge in the result of loading the link\n    merged = loadRef(merged, ref, directory);\n  });\n  return merged;\n}\n\nmodule.exports = {\n  findRefs,\n  flexibleLoadByExtSync,\n  loadRef,\n  loadRefs,\n  loadYamlFromFilenameSync,\n};\n"
  ]
}
