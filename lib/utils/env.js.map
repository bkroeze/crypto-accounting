{
  "version": 3,
  "sources": [
    "env.js"
  ],
  "names": [
    "r",
    "require",
    "getVal",
    "key",
    "defaultVal",
    "env",
    "process",
    "ENV",
    "envKey",
    "has",
    "module",
    "exports"
  ],
  "mappings": "AAAA,IAAIA,IAAIC,QAAQ,OAAR,CAAR;;AAEA;;;;;;;AAOA,SAASC,MAAT,CAAgBC,GAAhB,EAAqBC,aAAW,IAAhC,EAAsC;AACpC,QAAMC,MAAMC,QAAQD,GAAR,CAAYE,GAAxB;AACA,MAAIF,GAAJ,EAAS;AACP,UAAMG,SAAU,GAAEL,GAAI,IAAGE,GAAI,EAA7B;AACA,QAAIL,EAAES,GAAF,CAAMD,MAAN,EAAcF,QAAQD,GAAtB,CAAJ,EAAgC;AAC9B,aAAOC,QAAQD,GAAR,CAAYG,MAAZ,CAAP;AACD;AACF;AACD,MAAIR,EAAES,GAAF,CAAMN,GAAN,EAAWG,QAAQD,GAAnB,CAAJ,EAA6B;AAC3B,WAAOC,QAAQD,GAAR,CAAYF,GAAZ,CAAP;AACD;AACD,SAAOC,UAAP;AACD;;AAEDM,OAAOC,OAAP,GAAiB;AACfT;AADe,CAAjB",
  "file": "env.js",
  "sourceRoot": "../../src/utils",
  "sourcesContent": [
    "var r = require('ramda');\n\n/**\n * Gets a value from the process environment, taking into account any\n * environment overrides, in the form of key_ENV.\n * @param {String} key for environment variable\n * @param {Any} default value to return if not found\n * @return {String|Any} value from process, else default\n */\nfunction getVal(key, defaultVal=null) {\n  const env = process.env.ENV;\n  if (env) {\n    const envKey = `${key}_${env}`;\n    if (r.has(envKey, process.env)) {\n      return process.env[envKey];\n    }\n  }\n  if (r.has(key, process.env)) {\n    return process.env[key];\n  }\n  return defaultVal;\n}\n\nmodule.exports = {\n  getVal\n};\n"
  ]
}
