{
  "version": 3,
  "sources": [
    "models.js"
  ],
  "names": [
    "R",
    "require",
    "RA",
    "stripFalsyExcept",
    "toStrip",
    "butNot",
    "stripped",
    "Object",
    "keys",
    "forEach",
    "key",
    "val",
    "indexOf",
    "isNotEmpty",
    "isNotUndefined",
    "stripFalsy",
    "toObject",
    "work",
    "e",
    "arrayToObjects",
    "options",
    "map",
    "x",
    "toShallowObject",
    "has",
    "shallow",
    "objectValsToObject",
    "obj",
    "keysIn",
    "filterEmpty",
    "filter",
    "complement",
    "isEmpty",
    "mapTrim",
    "trim",
    "splitSpace",
    "split",
    "numberRe",
    "RegExp",
    "looksNumeric",
    "search",
    "startsWithCarat",
    "startsWith",
    "isConnector",
    "contains",
    "__",
    "timeRE",
    "isTime",
    "test",
    "splitAndTrim",
    "module",
    "exports"
  ],
  "mappings": "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",
  "file": "models.js",
  "sourceRoot": "../../src/utils",
  "sourcesContent": [
    "/* eslint no-underscore-dangle: off */\nconst R = require('ramda');\nconst RA = require('ramda-adjunct');\n\n/**\n * Returns a copy of an object, with all members having falsy values removed,\n * except for those in the `butNot` list.\n * @param {object} toStrip\n * @param {array} (optional) list of keys to retain even if falsy\n * @return {object} stripped copy\n */\nfunction stripFalsyExcept(toStrip, butNot = []) {\n  const stripped = {};\n\n  Object.keys(toStrip).forEach((key) => {\n    const val = toStrip[key];\n    if (R.indexOf(key, butNot) > -1 || (val && RA.isNotEmpty(val) && RA.isNotUndefined(val))) {\n      stripped[key] = val;\n    }\n  });\n  return stripped;\n}\n\nfunction stripFalsy(toStrip) {\n  return stripFalsyExcept(toStrip, []);\n}\n\n/**\n * Simple helper for classes with \"toObject\" functions\n * @param {Object} work\n * @return {Object} work.toObject() results;\n */\nfunction toObject(work) {\n  try {\n    return work.toObject()\n  } catch (e) {\n    return work;\n  }\n}\n\nfunction arrayToObjects(work, options) {\n  return work.map(x => x.toObject(options));\n}\n\n/**\n * Simple helper for classes with \"toObject\" functions\n * @param {Object} work\n * @return {Object} work.toObject() results;\n */\nfunction toShallowObject(work) {\n  return (work && R.has(toObject, work)) ? work.toObject({shallow: true}) : null;\n}\n\nfunction objectValsToObject(obj, options) {\n  const work = {};\n  R.keysIn(obj).forEach((key) => {\n    work[key] = obj[key].toObject(options);\n  });\n  return work;\n}\n\nconst filterEmpty = R.filter(R.complement(R.isEmpty));\nconst mapTrim = R.map(R.trim);\nconst splitSpace = R.split(' ');\nconst numberRe = new RegExp(/^-?[0-9.\\,]+$/);\nconst looksNumeric = val => val.search(numberRe) > -1;\nconst startsWithCarat = R.startsWith('^');\nconst isConnector = R.contains(R.__, ['@', '=']);\nconst timeRE = new RegExp('^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]?$');\nconst isTime = (val) => timeRE.test(val);\n\nfunction splitAndTrim(work) {\n  return filterEmpty(mapTrim(splitSpace(work)));\n}\n\nmodule.exports = {\n  arrayToObjects,\n  filterEmpty,\n  isConnector,\n  isTime,\n  looksNumeric,\n  mapTrim,\n  numberRe,\n  objectValsToObject,\n  splitAndTrim,\n  splitSpace,\n  startsWithCarat,\n  stripFalsy,\n  toObject,\n  toShallowObject,\n  stripFalsyExcept,\n};\n"
  ]
}
